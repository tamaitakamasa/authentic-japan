# authentic-japan

## Directory Structure

- authentic-japan/
  - middleware.ts
  - types/
    - news.ts
    - wordpress.d.ts
    - activity.ts
    - region.ts
    - index.ts
    - bokun.ts
    - guide.ts
  - app/
    - [lang]/
      - tours/
        - page.tsx
      - contact/
        - page.tsx
      - global.css
      - terms/
        - page.tsx
      - about/
        - page.tsx
      - region/
        - page.tsx
      - news/
        - [id]/
          - page.tsx
          - not-found.tsx
        - page.tsx
      - layout.tsx
      - navigator/
        - [id]/
          - page.tsx
          - not-found.tsx
        - page.tsx
      - tour/
        - page.tsx
      - page.tsx
  - bun.lockb (binary file)
  - postcss.config.mjs
  - constants/
    - site.ts
    - metadata.ts
  - next.config.mjs
  - .next/
  - README.md
  - components/
    - InstagramFeed.tsx
    - ui/
      - label.tsx
      - button.tsx
      - checkbox.tsx
      - textarea.tsx
      - input.tsx
      - form.tsx
    - Home/
      - HomeNavigatorSlider.tsx
      - HomeRegionSlider.tsx
      - HomeHeroSlider.tsx
    - Contact/
      - ContactForm.tsx
    - Layout/
      - PageHeader.tsx
      - ContentHeader.tsx
      - Footer.tsx
      - Header.tsx
    - Region/
      - RegionSlider.tsx
    - News/
      - NewsItem.tsx
    - Navigator/
      - NavigatorInfo.tsx
      - NavigatorCard.tsx
      - NavigatorItem.tsx
    - Tour/
      - ClientFilteredActivities.tsx
      - TourButton.tsx
      - TourList.tsx
      - FilterComponent.tsx
      - TourItem.tsx
    - VideoPlayer.tsx
    - ScrollBarWidthManager.tsx
    - Button.tsx
    - Modal.tsx
    - VideoPlayerOld.tsx
    - LanguageSwitcher.tsx
  - package.json
  - .clinerules
  - lib/
    - debounce.ts
    - i18n.ts
    - fetchData.ts
    - utils.ts
    - validations/
      - contact.ts
      - shared.ts
    - formatDate.ts
    - youTubePlayer.js
  - components.json
  - tsconfig.json
  - .eslintrc.json

## File Contents

### middleware.ts

```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { match as matchLocale } from '@formatjs/intl-localematcher'
import Negotiator from 'negotiator'
import { LOCALES, DEFAULT_LOCALE } from '@/constants/site'

// ユーザーの優先言語を取得する関数
function getLocale(request: NextRequest): string {
  // Negotiatorに渡すためにヘッダーをプレーンなオブジェクトに変換
  const negotiatorHeaders: Record<string, string> = {}
  request.headers.forEach((value, key) => (negotiatorHeaders[key] = value))

  const locales = LOCALES
  // Accept-Languageヘッダーから言語リストを取得
  const languages = new Negotiator({ headers: negotiatorHeaders }).languages()

  // intl-localematcherを使用して最適な言語を選択
  return matchLocale(languages, locales, DEFAULT_LOCALE)
}

export function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname

  // パスに言語コードが含まれているかチェック
  const pathnameIsMissingLocale = LOCALES.every(
    (locale) => !pathname.startsWith(`/${locale}/`) && pathname !== `/${locale}`
  )

  if (pathnameIsMissingLocale) {
    // ユーザーの優先言語を取得
    const locale = getLocale(request)

    // デフォルト言語でパスが存在するかチェック
    const response = NextResponse.next()
    if (response.status === 404) {
      // ページが存在しない場合、検出された言語のホームページにリダイレクト
      return NextResponse.redirect(new URL(`/${locale}`, request.url))
    }

    // 存在する場合、検出された言語をパスに追加してリダイレクト
    return NextResponse.redirect(
      new URL(`/${locale}${pathname.startsWith('/') ? '' : '/'}${pathname}`, request.url)
    )
  }
}

// ミドルウェアを適用するパスを指定
export const config = {
  // matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],
	matcher: [
    // 静的ファイルや特定のパスを除外
    '/((?!api|_next/static|_next/image|favicon.ico|robots.txt|sitemap.xml|.*\\..*$).*)'
  ],
}

```

### types/news.ts

```
import type { Guide, WPMediaItem } from '@/types';

// export interface News extends WPNewsArticle {
// 	featured_media_item?: WPMediaItem;
// 	news_categories: {
//     id: number;
//     name: string;
//     slug: string;
//   }[];
// }

export interface News {
	id: number;
	date: string;
	title: string;
	content: string;
	featured_media?: WPMediaItem;
	categories: {
    id: number;
    name: string;
    slug: string;
  }[];
	guides?: Guide[];
}

```

### types/wordpress.d.ts

```
export interface WPArticle {
	id: number;
	date: string;
	title: {
		rendered: string;
	};
	content: {
		rendered: string;
	};
	featured_media: number;
	categories: number[];
	tags: number[];
}

export interface WPLink {
	href: string;
}

export interface WPTag {
  id: number;
  count: number;
  description: string;
  link: string;
  name: string;
  slug: string;
  taxonomy: string;
  parent: number;
}

export interface WPCategory {
  id: number;
  count: number;
  description: string;
  link: string;
  name: string;
  slug: string;
  taxonomy: string;
  parent: number;
}

export interface WPImageSize {
  file: string;
  width: number;
  height: number;
  filesize: number;
  mime_type: string;
  source_url: string;
}

export interface WPMediaSizes {
  medium: WPImageSize;
  large: WPImageSize;
  thumbnail: WPImageSize;
  medium_large: WPImageSize;
  "1536x1536": WPImageSize;
  "2048x2048": WPImageSize;
  full: Omit<WPImageSize, "filesize">; // full サイズには filesize プロパティがないようです
  [key: string]: WPImageSize | Omit<WPImageSize, "filesize">; // カスタムサイズに対応
}

export interface WPMediaItem {
  id: number;
  date: string;
  date_gmt: string;
  guid: {
    rendered: string;
  };
  modified: string;
  modified_gmt: string;
  slug: string;
  status: string;
  type: string;
  link: string;
  title: {
    rendered: string;
  };
  author: number;
  featured_media: number;
  comment_status: string;
  ping_status: string;
  template: string;
  meta: {
    _acf_changed: boolean;
  };
  class_list: string[];
  acf: unknown[]; // You might want to define a more specific type if ACF fields are used
  description: {
    rendered: string;
  };
  caption: {
    rendered: string;
  };
  alt_text: string;
  media_type: string;
  mime_type: string;
  media_details: {
    width: number;
    height: number;
    file: string;
    filesize: number;
    sizes: WPMediaSizes;
    image_meta: {
      aperture: string;
      credit: string;
      camera: string;
      caption: string;
      created_timestamp: string;
      copyright: string;
      focal_length: string;
      iso: string;
      shutter_speed: string;
      title: string;
      orientation: string;
      keywords: string[];
    };
    original_image: string;
  };
  post: number;
  source_url: string;
  _links: {
    self: Array<{ href: string }>;
    collection: Array<{ href: string }>;
    about: Array<{ href: string }>;
    author: Array<{ embeddable: boolean; href: string }>;
  };
}

export interface WPImageSizes {
	thumbnail: string;
	'thumbnail-width': number;
	'thumbnail-height': number;
	medium: string;
	'medium-width': number;
	'medium-height': number;
	medium_large: string;
	'medium_large-width': number;
	'medium_large-height': number;
	large: string;
	'large-width': number;
	'large-height': number;
	'1536x1536': string;
	'1536x1536-width': number;
	'1536x1536-height': number;
	'2048x2048': string;
	'2048x2048-width': number;
	'2048x2048-height': number;
}

export interface WPGalleryItem {
	ID: number;
	id: number;
	title: string;
	filename: string;
	filesize: number;
	url: string;
	link: string;
	alt: string;
	author: string;
	description: string;
	caption: string;
	name: string;
	status: string;
	uploaded_to: number;
	date: string;
	modified: string;
	menu_order: number;
	mime_type: string;
	type: string;
	subtype: string;
	icon: string;
	width: number;
	height: number;
	sizes: WPImageSizes;
}

// export interface WPArticleWithDetails extends WPArticle {
// 	featured_media_item?: WPMediaItem;
// 	category_details: WPCategory[];
// }

export interface WPNewsArticle extends WPArticle {
	acf: {
		guide?: number[];
	};
}

export interface WPGuide extends WPArticle {
	acf: {
		// vendor_id: string;
		title: string;
		name: string;
		mv: WPGalleryItem;
		photo: WPGalleryItem;
		copy: string;
		description: string;
		career: string;
		region: number[];
		values: {
			title: string;
			description: string;
		}[];
		sns: {
			instagram: string;
			facebook: string;
			website: string;
			note: string;
		};
	};
}

export interface WPRegion extends WPArticle {
	acf: {
		name: string;
		description: string;
		mv: WPGalleryItem;
		gallery: WPGalleryItem[];
		access: string;
	};
}

export interface WPTour extends WPArticle {
	acf: {
		bokun_id: string;
		guide: number[];
	};
}

// export interface WPLocationData {
// 	locationGroups: LocationGroup[];
// }

export interface WPSiteContent {
	home_slider: {
		main_copy: string;
		sub_copy: string;
		mv: WPGalleryItem;
		url: string;
	}[];
	home_regions_description?: string;
	home_about_description?: string;
	home_about_mv?: WPGalleryItem;
	home_about_video?: string;
	// locations?: LocationGroup[];
	about_description?: string;
	about_video?: string;
	about_mv: WPGalleryItem;
	about_section0_description?: string;
	about_section1_title?: string;
	about_section1_description?: string;
	about_section2_title?: string;
	about_section2_description?: string;
	about_section3_title?: string;
	about_section3_description?: string;
	regions_description?: string;
	regions_mv?: WPGalleryItem;
	// regions: {
	// 	description: string;
	// 	mv: WPGalleryItem;
	// };
	navigators_title: string;
	navigators_description: string;
	navigators_mv: WPGalleryItem;
	tours_mv?: WPGalleryItem;
}

```

### types/activity.ts

```
import type { Guide } from '@/types';
// import type { BokunActivity } from '@/types';

export interface ActivityFilters {
	guides?: string[];
	regions?: string[];
	search?: string;
}

export interface Activity {
	id: number;
	title: string;
	summary?: string;
	excerpt?: string;
	photo?: string;
	categories: string[];
	tags?: {
    id: number;
    name: string;
    slug: string;
  }[];
	price: number;
	formattedPrice: string;
	regions?: string[];
	regionIds?: number[];
	duration: string;
	durationDays: number;
	durationHours: number;
	guides?: Guide[];
	guideIds?: number[];
}

```

### types/region.ts

```
import { WPGalleryItem } from "./wordpress";

export interface Region {
	id: number;
	name: string;
	description: string;
	mv: string;
	gallery: WPGalleryItem[];
	access: string;
}

```

### types/index.ts

```
export * from "@/types/bokun";
export * from "@/types/wordpress";
export * from "@/types/activity";
export * from "@/types/guide";
export * from "@/types/region";
export * from "@/types/news";

```

### types/bokun.ts

```
interface TermFacetEntry {
	key: string;
	count: number;
}

interface TermFacet {
	name: string;
	title: string;
	entries: TermFacetEntry[];
	flags: any[];
	multipleSelection: boolean;
	sortedEntries: TermFacetEntry[];
}

interface TermFacets {
	difficulty: TermFacet;
	country: TermFacet;
	city: TermFacet;
	supplier: TermFacet;
	activityAttributes: TermFacet;
	guidanceLanguages: TermFacet;
	activityType: TermFacet;
	activityCategories: TermFacet;
}

interface LocationCode {
	country: string;
	location: string;
	name: string;
}

interface GooglePlace {
	placeId: string;
	address: string;
}

interface Vendor {
	id: number;
	title: string;
}

export interface DerivedPhoto {
	name: string;
	url: string;
	cleanUrl: string;
}

export interface KeyPhoto {
	id: number;
	originalUrl: string;
	description: string | null;
	alternateText: string | null;
	height: string;
	width: string;
	flags: any[];
	derived: DerivedPhoto[];
	fileName: string;
}

export interface BokunActivity {
	id: string;
	productGroupId: number;
	title: string;
	summary: string;
	excerpt?: string;
	price: number;
	locationCode?: LocationCode;
	googlePlace: GooglePlace;
	vendor: Vendor;
	box: boolean;
	inventoryLocal: boolean;
	usedInAffiliateHub: boolean;
	showInMarketplaceSearch: boolean;
	boxedProductId: number;
	boxedSupplierId: number;
	difficultyLevel: string;
	activityCategories: string[];
	keywords: string[];
	flags: any[];
	reviewRating: number;
	reviewCount: number;
	durationText: string;
	baseLanguage: string;
	languages: string[];
	paymentCurrencies: string[];
	customFields: any[];
	places: string[];
	keyPhoto: KeyPhoto;
	photos: KeyPhoto[];
	videos: any[];
	fields: {
		durationWeeks: number;
		durationDays: number;
		durationHours: number;
	};
}

export interface BokunResponseData {
	tookInMillis: number;
	totalHits: number;
	tagFilters: any[];
	tagFacets: any[];
	termFacets: TermFacets;
	tagFacetHierarchy: any[];
	items: BokunActivity[];
}

```

### types/guide.ts

```
import type { WPGalleryItem } from '@/types';

export interface Guide {
	id: number;
	wpPostId?: number;
	title: string;
	name: string;
	mv?: WPGalleryItem;
	photo?: WPGalleryItem;
	copy?: string;
	description?: string;
	// career?: string;
	regionIds?: number[];
	regions?: string[];
	tags: {
    id: number;
    name: string;
    slug: string;
  }[];
	values: {
		title: string;
		description: string;
	}[];
	sns?: {
		instagram?: string;
		facebook?: string;
		website?: string;
		note?: string;
	};
}

```

### app/[lang]/tours/page.tsx

```
import { Locale } from '@/constants/site';
import { ContentHeader } from '@/components/Layout/ContentHeader';
import { getWPSiteOptions } from '@/lib/fetchData';
import Image from 'next/image';
import { Suspense } from 'react';
import TourList from '@/components/Tour/TourList';
import { ActivityFilters } from '@/types/activity';

function parseQueryParam(value: string | string[] | undefined): string[] {
	if (!value) return [];
	if (Array.isArray(value)) return value;
	return value.split(',').filter(Boolean);
}

function parseSearchParam(value: string | string[] | undefined): string | undefined {
	if (!value) return undefined;
	if (Array.isArray(value)) return value[0];
	return value;
}

export default async function Page({
	params: { lang },
	searchParams,
}: {
	params: { lang: Locale };
	searchParams: { [key: string]: string | string[] | undefined };
}) {

	const filters: ActivityFilters = {
		guides: parseQueryParam(searchParams.guides),
		regions: parseQueryParam(searchParams.regions),
		search: parseSearchParam(searchParams.search)
	};
	console.log('filters:', filters);

	const siteOptions = await getWPSiteOptions(lang);

	return (
		<>
			<ContentHeader title="TOURS" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'TOURS' }]} lang={lang} />
			<div className="l-contents__body p-page p-page-tours">
				<div className="p-page__header u-full-bleed">
					{siteOptions.tours_mv && (
						<figure className="p-page__mv">
							<Image src={siteOptions.tours_mv.sizes['2048x2048']} alt="" fill style={{ objectFit: 'cover' }} />
						</figure>
					)}
				</div>
				<div className="p-page-tours__tours c-tours">
					<Suspense fallback={<p>Loading...</p>}>
						<TourList
							lang={lang}
							filters={filters}
						/>
					</Suspense>
				</div>
			</div>
		</>
	);
}

```

### app/[lang]/contact/page.tsx

```
// import Image from 'next/image';
import ContactForm from '@/components/Contact/ContactForm';
import { ContentHeader } from '@/components/Layout/ContentHeader';
import { Locale } from '@/constants/site';

export default async function Home({ params: { lang } }: { params: { lang: Locale } }) {
	return (
		<>
			<ContentHeader title="CONTACT" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'CONTACT' }]} lang={lang} />
			<div className="l-contents__body p-page-contact">
				<ContactForm lang={lang} />
			</div>
		</>
	);
}

```

### app/[lang]/global.css

```
@import 'tailwindcss';

@plugin 'tailwindcss-animate';

@custom-variant dark (&:is(.dark *));

:root {
  --background: hsl(0 0% 100%);
  --foreground: hsl(240 10% 3.9%);
  --card: hsl(0 0% 100%);
  --card-foreground: hsl(240 10% 3.9%);
  --popover: hsl(0 0% 100%);
  --popover-foreground: hsl(240 10% 3.9%);
  --primary: hsl(240 5.9% 10%);
  --primary-foreground: hsl(0 0% 98%);
  --secondary: hsl(240 4.8% 95.9%);
  --secondary-foreground: hsl(240 5.9% 10%);
  --muted: hsl(240 4.8% 95.9%);
  --muted-foreground: hsl(240 3.8% 46.1%);
  --accent: hsl(240 4.8% 95.9%);
  --accent-foreground: hsl(240 5.9% 10%);
  --destructive: hsl(0 84.2% 60.2%);
  --destructive-foreground: hsl(0 0% 98%);
  --border: hsl(240 5.9% 90%);
  --input: hsl(240 5.9% 90%);
  --ring: hsl(240 10% 3.9%);
  --chart-1: hsl(12 76% 61%);
  --chart-2: hsl(173 58% 39%);
  --chart-3: hsl(197 37% 24%);
  --chart-4: hsl(43 74% 66%);
  --chart-5: hsl(27 87% 67%);
  --radius: 0.6rem;
}

.dark {
  --background: hsl(240 10% 3.9%);
  --foreground: hsl(0 0% 98%);
  --card: hsl(240 10% 3.9%);
  --card-foreground: hsl(0 0% 98%);
  --popover: hsl(240 10% 3.9%);
  --popover-foreground: hsl(0 0% 98%);
  --primary: hsl(0 0% 98%);
  --primary-foreground: hsl(240 5.9% 10%);
  --secondary: hsl(240 3.7% 15.9%);
  --secondary-foreground: hsl(0 0% 98%);
  --muted: hsl(240 3.7% 15.9%);
  --muted-foreground: hsl(240 5% 64.9%);
  --accent: hsl(240 3.7% 15.9%);
  --accent-foreground: hsl(0 0% 98%);
  --destructive: hsl(0 62.8% 30.6%);
  --destructive-foreground: hsl(0 0% 98%);
  --border: hsl(240 3.7% 15.9%);
  --input: hsl(240 3.7% 15.9%);
  --ring: hsl(240 4.9% 83.9%);
  --chart-1: hsl(220 70% 50%);
  --chart-2: hsl(160 60% 45%);
  --chart-3: hsl(30 80% 55%);
  --chart-4: hsl(280 65% 60%);
  --chart-5: hsl(340 75% 55%);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

```

### app/[lang]/terms/page.tsx

```
import { ContentHeader } from '@/components/Layout/ContentHeader';
import { Locale } from '@/constants/site';
import { useTranslations } from '@/lib/i18n';

export default async function Home({ params: { lang } }: { params: { lang: Locale } }) {
	const t = useTranslations(lang);

	return (
		<>
			<ContentHeader
				title={t({
					ja: '利用規約',
					en: 'TERMS OF USE',
					fr: "CONDITIONS D'UTILISATION"
				})}
				breadcrumbs={[
					{
						label: 'HOME',
						href: '/'
					},
					{
						label: t({
							ja: '利用規約',
							en: 'TERMS OF USE',
							fr: "CONDITIONS D'UTILISATION"
						})
					}
				]}
				lang={lang}
			/>
			<div className="l-contents__body p-page p-page-privacy">
				<div className="p-page-privacy__content c-article">
					{/* <h1 className="text-4xl">
						{t({
							ja: 'Authentic Japan利用規約',
							en: 'Authentic Japan Terms of Service',
							fr: "Conditions d'utilisation d'Authentic Japan"
						})}
					</h1> */}

					<section>
						<h2>
							{t({
								ja: '第1章 総則',
								en: 'Chapter 1: General Provisions',
								fr: 'Chapitre 1 : Dispositions générales'
							})}
						</h2>

						<section>
							<h3>
								{t({
									ja: '第1条 (目的)',
									en: 'Article 1 (Purpose)',
									fr: 'Article 1 (Objet)'
								})}
							</h3>
							<p>
								{t({
									ja: '本利用規約は、Authentic Japan（以下「当社」という）が提供するプラットフォームサービス（以下「本サービス」という）の利用に関する条件を定めるものです。本サービスは、日本各地の深層に流れる地域の精神性と内面性を伝える体験を、ナビゲーターと利用者を繋ぐことで実現します。',
									en: 'These Terms of Service establish the conditions for using the platform service (hereinafter referred to as "the Service") provided by Authentic Japan (hereinafter referred to as "the Company"). The Service facilitates experiences that convey the spiritual and inner aspects of various regions in Japan by connecting Navigators with Users.',
									fr: "Les présentes Conditions d'utilisation établissent les modalités d'utilisation de la plateforme de services (ci-après « le Service ») fournie par Authentic Japan (ci-après « la Société »). Le Service facilite les expériences qui transmettent les aspects spirituels et intérieurs des différentes régions du Japon en connectant les Navigateurs avec les Utilisateurs."
								})}
							</p>
						</section>

						<section>
							<h3>
								{t({
									ja: '第2条 (定義)',
									en: 'Article 2 (Definitions)',
									fr: 'Article 2 (Définitions)'
								})}
							</h3>
							<ol>
								<li>
									{t({
										ja: '「ナビゲーター」とは、本サービスに登録し、体験プログラムを提供する個人または団体をいいます。',
										en: '"Navigator" refers to individuals or organizations registered with the Service who provide experience programs.',
										fr: '« Navigateur » désigne les individus ou organisations inscrits au Service qui fournissent des programmes d\'expérience.'
									})}
								</li>
								<li>
									{t({
										ja: '「利用者」とは、本サービスを通じて体験プログラムを予約・参加する者をいいます。',
										en: '"User" refers to individuals who book and participate in experience programs through the Service.',
										fr: '« Utilisateur » désigne les personnes qui réservent et participent à des programmes d\'expérience via le Service.'
									})}
								</li>
								<li>
									{t({
										ja: '「体験プログラム」とは、ナビゲーターが提供する旅行、交流、学習に関する役務をいいます。',
										en: '"Experience Program" refers to travel, exchange, and learning services provided by Navigators.',
										fr: '« Programme d\'expérience » désigne les services de voyage, d\'échange et d\'apprentissage fournis par les Navigateurs.'
									})}
								</li>
							</ol>
						</section>

						<section>
							<h3>
								{t({
									ja: '第3条 (サービスの内容)',
									en: 'Article 3 (Service Content)',
									fr: 'Article 3 (Contenu du service)'
								})}
							</h3>
							<ol>
								<li>
									{t({
										ja: '当社は、ナビゲーターと利用者を電子的に仲介するプラットフォームを提供します。',
										en: 'The Company provides a platform that electronically mediates between Navigators and Users.',
										fr: 'La Société fournit une plateforme qui fait office d\'intermédiaire électronique entre les Navigateurs et les Utilisateurs.'
									})}
								</li>
								<li>
									{t({
										ja: '体験プログラムの企画、実施、管理はすべてナビゲーター自身の責任において行われます。',
										en: 'The planning, implementation, and management of Experience Programs are carried out under the sole responsibility of the Navigator.',
										fr: 'La planification, la mise en œuvre et la gestion des Programmes d\'expérience sont effectuées sous la seule responsabilité du Navigateur.'
									})}
								</li>
							</ol>
						</section>
					</section>

					<section>
						<h2>
							{t({
								ja: '第2章 会員登録',
								en: 'Chapter 2: Member Registration',
								fr: 'Chapitre 2 : Inscription des membres'
							})}
						</h2>

						<section>
							<h3>
								{t({
									ja: '第4条 (利用登録)',
									en: 'Article 4 (User Registration)',
									fr: 'Article 4 (Inscription des utilisateurs)'
								})}
							</h3>
							<ol>
								<li>
									{t({
										ja: '本サービスの利用希望者（ナビゲーター、利用者）は、当社所定の方法により登録申請を行い、当社の審査を経て登録されるものとします。',
										en: 'Prospective users (Navigators and Users) must apply for registration through the Company\'s prescribed method and will be registered after passing the Company\'s review.',
										fr: 'Les utilisateurs potentiels (Navigateurs et Utilisateurs) doivent faire une demande d\'inscription selon la méthode prescrite par la Société et seront inscrits après avoir passé l\'examen de la Société.'
									})}
								</li>
								<li>
									{t({
										ja: '当社は、以下の各号のいずれかに該当する場合、登録を拒否することができます。',
										en: 'The Company may refuse registration in any of the following cases:',
										fr: 'La Société peut refuser l\'inscription dans l\'un des cas suivants :'
									})}
									<ol type="a">
										<li>
											{t({
												ja: '虚偽の情報を提供した場合',
												en: 'When false information is provided',
												fr: 'Lorsque de fausses informations sont fournies'
											})}
										</li>
										<li>
											{t({
												ja: '過去に本規約に違反した者である場合',
												en: 'When the applicant has previously violated these terms',
												fr: 'Lorsque le demandeur a déjà violé ces conditions'
											})}
										</li>
										<li>
											{t({
												ja: 'その他、当社が不適切と判断した場合',
												en: 'When the Company deems it inappropriate for other reasons',
												fr: 'Lorsque la Société le juge inapproprié pour d\'autres raisons'
											})}
										</li>
									</ol>
								</li>
								<li>
									{t({
										ja: '利用者は満18歳以上であることを要します。18歳未満の場合は法定代理人の同意を必要とします。',
										en: 'Users must be at least 18 years old. Those under 18 require consent from their legal guardian.',
										fr: 'Les utilisateurs doivent avoir au moins 18 ans. Les personnes de moins de 18 ans doivent obtenir le consentement de leur tuteur légal.'
									})}
								</li>
							</ol>
						</section>
					</section>

					<section>
						<h2>
							{t({
								ja: '第3章 責任と免責',
								en: 'Chapter 3: Responsibilities and Disclaimers',
								fr: 'Chapitre 3 : Responsabilités et clauses de non-responsabilité'
							})}
						</h2>

						<section>
							<h3>
								{t({
									ja: '第5条 (ナビゲーターの責任)',
									en: 'Article 5 (Navigator Responsibilities)',
									fr: 'Article 5 (Responsabilités du Navigateur)'
								})}
							</h3>
							<ol>
								<li>
									{t({
										ja: 'ナビゲーターは、提供する体験プログラムについて以下の責任を負います。',
										en: 'Navigators are responsible for the following regarding their Experience Programs:',
										fr: 'Les Navigateurs sont responsables des éléments suivants concernant leurs Programmes d\'expérience :'
									})}
									<ol type="a">
										<li>
											{t({
												ja: '安全管理',
												en: 'Safety management',
												fr: 'Gestion de la sécurité'
											})}
										</li>
										<li>
											{t({
												ja: '正確な情報提供',
												en: 'Accurate information provision',
												fr: 'Fourniture d\'informations précises'
											})}
										</li>
										<li>
											{t({
												ja: '利用者との契約履行',
												en: 'Contract fulfillment with users',
												fr: 'Exécution du contrat avec les utilisateurs'
											})}
										</li>
										<li>
											{t({
												ja: '事故発生時の対応',
												en: 'Response to accidents',
												fr: 'Réponse aux accidents'
											})}
										</li>
									</ol>
								</li>
								<li>
									{t({
										ja: 'ナビゲーターは、旅行業法その他の関連法規を遵守するものとします。',
										en: 'Navigators must comply with travel industry laws and other relevant regulations.',
										fr: 'Les Navigateurs doivent se conformer aux lois sur l\'industrie du voyage et autres réglementations pertinentes.'
									})}
								</li>
							</ol>
						</section>

						<section>
							<h3>
								{t({
									ja: '第6条 (当社の免責)',
									en: 'Article 6 (Company Disclaimers)',
									fr: 'Article 6 (Clauses de non-responsabilité de la Société)'
								})}
							</h3>
							<ol>
								<li>
									{t({
										ja: '当社は、体験プログラムの内容、実施、結果について一切の責任を負いません。',
										en: 'The Company assumes no responsibility for the content, implementation, or results of Experience Programs.',
										fr: 'La Société n\'assume aucune responsabilité quant au contenu, à la mise en œuvre ou aux résultats des Programmes d\'expérience.'
									})}
								</li>
								<li>
									{t({
										ja: '体験プログラムに起因する損害について、当社は賠償する義務を負いません。',
										en: 'The Company is not liable for damages arising from Experience Programs.',
										fr: 'La Société n\'est pas responsable des dommages résultant des Programmes d\'expérience.'
									})}
								</li>
								<li>
									{t({
										ja: 'ナビゲーターと利用者間の紛争については、当社は一切関与しません。',
										en: 'The Company will not be involved in disputes between Navigators and Users.',
										fr: 'La Société ne sera pas impliquée dans les litiges entre les Navigateurs et les Utilisateurs.'
									})}
								</li>
								<li>
									{t({
										ja: '本サービスは現状有姿で提供され、特定の目的への適合性を保証するものではありません。',
										en: 'The Service is provided "as is" and does not guarantee fitness for any particular purpose.',
										fr: 'Le Service est fourni "tel quel" et ne garantit pas l\'adéquation à un usage particulier.'
									})}
								</li>
							</ol>
						</section>

						<section>
							<h3>
								{t({
									ja: '第7条 (損害賠償)',
									en: 'Article 7 (Compensation for Damages)',
									fr: 'Article 7 (Indemnisation des dommages)'
								})}
							</h3>
							<ol>
								<li>
									{t({
										ja: '利用者またはナビゲーターが本サービスの利用に関して第三者に損害を与えた場合、自己の責任と費用において解決するものとします。',
										en: 'If Users or Navigators cause damage to third parties in relation to the use of the Service, they shall resolve the matter at their own responsibility and expense.',
										fr: 'Si les Utilisateurs ou les Navigateurs causent des dommages à des tiers en relation avec l\'utilisation du Service, ils devront résoudre le problème à leurs propres frais et responsabilité.'
									})}
								</li>
								<li>
									{t({
										ja: '当社の損害賠償責任は、法令で許容される限り3万円を上限とし、直接かつ現実に被った損害の範囲に限られます。ただし、当社の故意または重過失による場合はこの限りではありません。',
										en: 'The Company\'s liability for damages is limited to 30,000 yen to the extent permitted by law and is limited to direct and actual damages incurred. However, this limitation does not apply in cases of willful misconduct or gross negligence by the Company.',
										fr: 'La responsabilité de la Société en matière de dommages est limitée à 30 000 yens dans la mesure permise par la loi et se limite aux dommages directs et réels subis. Toutefois, cette limitation ne s\'applique pas en cas de faute intentionnelle ou de négligence grave de la part de la Société.'
									})}
								</li>
							</ol>
						</section>
					</section>

					<section>
						<h2>
							{t({
								ja: '第4章 個人情報保護',
								en: 'Chapter 4: Personal Information Protection',
								fr: 'Chapitre 4 : Protection des informations personnelles'
							})}
						</h2>

						<section>
							<h3>
								{t({
									ja: '第8条 (個人情報の取り扱い)',
									en: 'Article 8 (Handling of Personal Information)',
									fr: 'Article 8 (Traitement des informations personnelles)'
								})}
							</h3>
							<ol>
								<li>
									{t({
										ja: '当社は、本サービスを通じて取得する個人情報を、別途定める「個人情報保護方針」に従い適切に管理します。',
										en: 'The Company will appropriately manage personal information obtained through the Service in accordance with the separately established "Privacy Policy."',
										fr: 'La Société gérera de manière appropriée les informations personnelles obtenues via le Service conformément à la "Politique de confidentialité" établie séparément.'
									})}
								</li>
								<li>
									{t({
										ja: '当社は、以下の目的で個人情報を利用することがあります：',
										en: 'The Company may use personal information for the following purposes:',
										fr: 'La Société peut utiliser les informations personnelles aux fins suivantes :'
									})}
									<ol type="a">
										<li>
											{t({
												ja: 'サービス提供および運営',
												en: 'Service provision and operation',
												fr: 'Fourniture et exploitation du service'
											})}
										</li>
										<li>
											{t({
												ja: 'ナビゲーターと利用者のマッチング',
												en: 'Matching Navigators and Users',
												fr: 'Mise en relation des Navigateurs et des Utilisateurs'
											})}
										</li>
										<li>
											{t({
												ja: 'サービス改善のための分析',
												en: 'Analysis for service improvement',
												fr: 'Analyse pour l\'amélioration du service'
											})}
										</li>
										<li>
											{t({
												ja: 'お客様への連絡および情報提供',
												en: 'Communication and information provision to customers',
												fr: 'Communication et fourniture d\'informations aux clients'
											})}
										</li>
									</ol>
								</li>
							</ol>
						</section>
					</section>

					<section>
						<h2>
							{t({
								ja: '第5章 その他',
								en: 'Chapter 5: Other Provisions',
								fr: 'Chapitre 5 : Autres dispositions'
							})}
						</h2>

						<section>
							<h3>
								{t({
									ja: '第9条 (規約の変更)',
									en: 'Article 9 (Changes to Terms)',
									fr: 'Article 9 (Modifications des conditions)'
								})}
							</h3>
							<ol>
								<li>
									{t({
										ja: '当社は、必要に応じて本規約を変更できるものとします。',
										en: 'The Company may modify these terms as necessary.',
										fr: 'La Société peut modifier ces conditions si nécessaire.'
									})}
								</li>
								<li>
									{t({
										ja: '規約変更時は、当社所定の方法により通知するものとします。',
										en: 'When terms are modified, notification will be made through the Company\'s prescribed method.',
										fr: 'Lorsque les conditions sont modifiées, une notification sera faite selon la méthode prescrite par la Société.'
									})}
								</li>
							</ol>
						</section>

						<section>
							<h3>
								{t({
									ja: '第10条 (準拠法・管轄)',
									en: 'Article 10 (Governing Law and Jurisdiction)',
									fr: 'Article 10 (Loi applicable et juridiction)'
								})}
							</h3>
							<p>
								{t({
									ja: '本規約は日本法に準拠し、本サービスに関する紛争は、当社の所在地を管轄する裁判所を第一審の専属的合意管轄裁判所とします。',
									en: 'These terms are governed by Japanese law, and any disputes related to the Service shall be subject to the exclusive jurisdiction of the court having jurisdiction over the location of the Company\'s headquarters as the court of first instance.',
									fr: 'Ces conditions sont régies par le droit japonais, et tout litige lié au Service sera soumis à la compétence exclusive du tribunal ayant juridiction sur le lieu du siège social de la Société en première instance.'
								})}
							</p>
						</section>
					</section>

					<section>
						<p className="p-page-privacy__appendix">
							{t({
								ja: '附則 この利用規約は、2024年12月26日から施行します。',
								en: 'Supplementary Provision: These Terms of Service shall come into effect from December 26, 2024.',
								fr: 'Disposition supplémentaire : Les présentes conditions d\'utilisation entreront en vigueur le 26 décembre 2024.'
							})}
						</p>
					</section>

					<section className="p-page-privacy__law">
						<h2>
							{t({
								ja: '特定商取引法に基づく表記',
								en: 'Notation Based on the Act on Specified Commercial Transactions',
								fr: 'Mentions légales basées sur la loi sur les transactions commerciales spécifiées'
							})}
						</h2>
						<dl>
							<div>
								<dt>
									{t({
										ja: '事業者名',
										en: 'Business Name',
										fr: 'Nom de l\'entreprise'
									})}
								</dt>
								<dd>
									{t({
										ja: '株式会社次世代共創企画',
										en: 'Next Generation Co-Creation Planning Corporation',
										fr: 'Next Generation Co-Creation Planning Corporation'
									})}
								</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: '代表者名',
										en: 'Representative',
										fr: 'Représentant'
									})}
								</dt>
								<dd>
									{t({
										ja: '山中昌幸',
										en: 'Masayuki Yamanaka',
										fr: 'Masayuki Yamanaka'
									})}
								</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: '所在地',
										en: 'Address',
										fr: 'Adresse'
									})}
								</dt>
								<dd>
									{t({
										ja: '兵庫県淡路市志筑1721-1',
										en: '1721-1 Shitsuki, Awaji City, Hyogo Prefecture',
										fr: '1721-1 Shitsuki, Ville d\'Awaji, Préfecture de Hyogo'
									})}
								</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: '電話番号',
										en: 'Phone Number',
										fr: 'Numéro de téléphone'
									})}
								</dt>
								<dd>0799-64-7766</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: 'メールアドレス',
										en: 'Email Address',
										fr: 'Adresse e-mail'
									})}
								</dt>
								<dd>aj-info@awajilab.jp</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: '販売価格',
										en: 'Sales Price',
										fr: 'Prix de vente'
									})}
								</dt>
								<dd>
									{t({
										ja: '各商品ページに記載',
										en: 'Listed on each product page',
										fr: 'Indiqué sur chaque page de produit'
									})}
								</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: '商品代金以外の必要料金',
										en: 'Additional Fees',
										fr: 'Frais supplémentaires'
									})}
								</dt>
								<dd>
									{t({
										ja: '各商品ページに記載',
										en: 'Listed on each product page',
										fr: 'Indiqué sur chaque page de produit'
									})}
								</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: '代金支払時期',
										en: 'Payment Timing',
										fr: 'Moment du paiement'
									})}
								</dt>
								<dd>
									{t({
										ja: '各商品ページに記載 / 表示価格は消費税込',
										en: 'Listed on each product page / Prices include consumption tax',
										fr: 'Indiqué sur chaque page de produit / Prix TTC'
									})}
								</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: 'サービス提供時期',
										en: 'Service Provision Timing',
										fr: 'Moment de la fourniture du service'
									})}
								</dt>
								<dd>
									{t({
										ja: '予約の利用日に提供',
										en: 'Provided on the reserved date',
										fr: 'Fourni à la date réservée'
									})}
								</dd>
							</div>
							<div>
								<dt>
									{t({
										ja: '契約申込の撤回または解除に関する事項',
										en: 'Cancellation and Withdrawal Policy',
										fr: 'Politique d\'annulation et de rétractation'
									})}
								</dt>
								<dd>
									{t({
										ja: '各商品ページに記載',
										en: 'Listed on each product page',
										fr: 'Indiqué sur chaque page de produit'
									})}
								</dd>
							</div>
						</dl>
					</section>
				</div>
			</div>
		</>
	);
}

```

### app/[lang]/about/page.tsx

```
import Image from 'next/image';
import { ContentHeader } from '@/components/Layout/ContentHeader';
import { PageHeader } from '@/components/Layout/PageHeader';
import { VideoPlayer } from '@/components/VideoPlayer';
import { Locale } from '@/constants/site';
import { getWPSiteOptions } from '@/lib/fetchData';
import { Metadata } from 'next';

type Props = {
  params: { lang: Locale }
}

export async function generateMetadata({ params: { lang } }: Props): Promise<Metadata> {
  return {
    // タイトルだけをオーバーライド
    // layout.tsxで設定したテンプレートが適用される
    title: {
      ja: "Authentic Japanについて",
      en: "About Authentic Japan",
      fr: "À propos d'Authentic Japan",
    }[lang],
    // 特定のページ用の説明文をオーバーライド
    description: {
      ja: "ページ固有の説明",
      en: "Page specific description",
      fr: "Description spécifique à la page",
    }[lang],
  };
}

export default async function AboutPage({ params: { lang } }: { params: { lang: Locale } }) {
	const siteOptions = await getWPSiteOptions(lang);

	return (
		<>
			<ContentHeader title="ABOUT US" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'ABOUT US' }]} lang={lang} />
			<div className="l-contents__body p-page p-page-about">
				<PageHeader description={siteOptions.about_description} mv={siteOptions.about_mv} />
				{siteOptions.about_video && (
					<div className="p-page-about__video">
						<VideoPlayer videoUrl={siteOptions.about_video} />
					</div>
				)}

				<div className="p-page-about-section">
					<div className="p-page-about-section__cols">
						<div className="p-page-about-section__col-left">
							<div className="p-page-about-section__description" dangerouslySetInnerHTML={{ __html: siteOptions.about_section0_description || '' }} />
						</div>
						<div className="p-page-about-section__col-right">
							<figure className="p-page-about-section__illust">
								<Image src="/about/about_all.svg" alt="" fill unoptimized />
							</figure>
						</div>
					</div>
				</div>

				<div className="p-page-about-section">
					<div className="p-page-about-section__cols">
						<div className="p-page-about-section__col-left">
							<p className="p-page-about-section__number u-green">01</p>
							<h2 className="p-page-about-section__title u-green">{siteOptions.about_section1_title}</h2>
							<div className="p-page-about-section__description" dangerouslySetInnerHTML={{ __html: siteOptions.about_section1_description || '' }} />
						</div>
						<div className="p-page-about-section__col-right">
							<figure className="p-page-about-section__illust">
								<Image src="/about/about1.svg" alt="" fill unoptimized />
							</figure>
						</div>
					</div>
				</div>

				<div className="p-page-about-section">
					<div className="p-page-about-section__cols">
						<div className="p-page-about-section__col-left">
							<p className="p-page-about-section__number u-red">02</p>
							<h2 className="p-page-about-section__title u-red">{siteOptions.about_section2_title}</h2>
							<div className="p-page-about-section__description" dangerouslySetInnerHTML={{ __html: siteOptions.about_section2_description || '' }} />
						</div>
						<div className="p-page-about-section__col-right">
							<figure className="p-page-about-section__illust">
								<Image src="/about/about2.svg" alt="" fill unoptimized />
							</figure>
						</div>
					</div>
				</div>

				<div className="p-page-about-section">
					<div className="p-page-about-section__cols">
						<div className="p-page-about-section__col-left">
							<p className="p-page-about-section__number u-blue">03</p>
							<h2 className="p-page-about-section__title u-blue">{siteOptions.about_section3_title}</h2>
							<div className="p-page-about-section__description" dangerouslySetInnerHTML={{ __html: siteOptions.about_section3_description || '' }} />
						</div>
						<div className="p-page-about-section__col-right">
							<figure className="p-page-about-section__illust">
								<Image src="/about/about3.svg" alt="" fill unoptimized />
							</figure>
						</div>
					</div>
				</div>
			</div>
		</>
	);
}

```

### app/[lang]/region/page.tsx

```
import Image from 'next/image';
import { Locale } from '@/constants/site';
// import { useTranslations } from '@/lib/i18n';
import { getFormattedGuideData, getFormattedRegionData, getGuidesByRegion } from '@/lib/utils';
import { ContentHeader } from '@/components/Layout/ContentHeader';
import { getWPSiteOptions } from '@/lib/fetchData';
import { Button } from '@/components/Button';
import { RegionSlider } from '@/components/Region/RegionSlider';
import NavigatorInfo from '@/components/Navigator/NavigatorInfo';

export default async function Page({ params: { lang } }: { params: { lang: Locale } }) {
	// const t = useTranslations(lang);
	const regions = await getFormattedRegionData(lang);
	const siteOptions = await getWPSiteOptions(lang);
	const guides = await getFormattedGuideData(lang);
	// const regionsPage = siteOptions.regions;
	// console.log('regions:', regions);
	return (
		<>
			<ContentHeader title="REGIONS" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'REGIONS' }]} lang={lang} />
			<div className="l-contents__body p-page p-page-region">
				<div className="p-page__header u-full-bleed">
					<div className="p-page__inner c-container">
						<p className="p-page__description" dangerouslySetInnerHTML={{ __html: siteOptions.regions_description || '' }} />
					</div>
					{siteOptions.regions_mv && (
						<figure className="p-page__mv">
							<Image src={siteOptions.regions_mv.sizes['2048x2048']} alt="" fill style={{ objectFit: 'cover' }} />
						</figure>
					)}
				</div>
				<div className="p-page-region__index">
					<figure className="p-page-region__map">
						<Image src="/region/map.svg" alt="" fill unoptimized />
					</figure>
					<ul className="p-page-region__list">
						{regions &&
							regions.length > 0 &&
							regions.map((region, index) => (
								<li key={index}>
									<a href={`#region${region.id}`}>
										<i className="c-pin"></i>
										<span>{region.name}</span>
									</a>
								</li>
							))}
					</ul>
				</div>
				<div className="p-page-region__items u-full-bleed">
					{regions.length > 0 &&
						regions.map((region, index) => {
							const regionGuides = getGuidesByRegion(guides, region.id);
							return (
								<div key={index} id={`region${region.id}`} className="p-page-region__item">
									<div className="c-region">
										{region.gallery && (
											<div className="c-region__gallery">
												<RegionSlider images={region.gallery} />
											</div>
										)}
										<div className="c-region__inner">
											<div className="c-region__content">
												<h2 className="c-region__name">{region.name}</h2>
												<div className="c-region__description">
													<p dangerouslySetInnerHTML={{ __html: region.description || '' }} />
												</div>
											</div>
											<div className="c-region__locale">
												<figure className="c-region__map">
													<Image src="/region/map_sample.svg" alt="" fill unoptimized />
												</figure>
												{region.access && (
													<div className="c-region__access">
														<Button href={`/${lang}/tour`} label="ACCESS" />
													</div>
												)}
											</div>
										</div>
										{regionGuides.length > 0 && (
											<div className="c-region__navigators">
												<h3 className="c-region__navigators-title">NAVIGATORS</h3>
												<div className="c-region__navigators-list">
													{regionGuides.map((guide) => (
														<div key={guide.id} className="c-region__navigator">
															<NavigatorInfo guide={guide} lang={lang} link />
														</div>
													))}
												</div>
											</div>
										)}
									</div>
								</div>
							);
						})}
				</div>
				{/* <figure className="p-page-region__mv u-full-bleed">
					<Image src={regionsPage.mv.sizes['1536x1536']} alt="" fill />
				</figure> */}
			</div>
		</>
	);
}

```

### app/[lang]/news/[id]/page.tsx

```
import Image from 'next/image';
import { Locale } from '@/constants/site';
import { notFound } from 'next/navigation';
import { ContentHeader } from '@/components/Layout/ContentHeader';
import { getFormattedNewsData } from '@/lib/utils';
import NavigatorInfo from '@/components/Navigator/NavigatorInfo';
import "@wordpress/block-library/build-style/style.css"
// import "@wordpress/block-library/build-style/theme.css"


export default async function Page({ params: { lang, id } }: { params: { lang: Locale; id: string } }) {

	const newsArticles = await getFormattedNewsData(lang);
	const article = newsArticles.find((article) => article.id === parseInt(id));
	// console.log(newsArticles);

	if (!article) {
		notFound();
	}

	return (
		<>
			<ContentHeader title="NEWS" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'NEWS', href: '/news' }, { label: 'NEWS' }]} lang={lang} />

			<div className="l-contents__body p-single p-single--no-header p-single-news">
				<div className="p-single-news__header">
					<time className="p-single-news__date" dateTime={article.date}>
						{article.date}
					</time>
					<h2 className="p-single-news__title">{article.title}</h2>
					{article.categories && article.categories.length > 0 && (
						<div className="p-single-news__categories">
							{article.categories.map((category) => (
								<span key={category.id} className="p-single-news__category c-taxonomy">
									{category.name}
								</span>
							))}
						</div>
					)}
					{article.guides && article.guides.length > 0 && (
						<div className="p-single-news__guides">
							{article.guides.map((guide) => (
								<div key={guide.id} className="p-single-news__guide">
									<NavigatorInfo guide={guide} link lang={lang}  />
								</div>
							))}
						</div>
					)}
				</div>
				{article.featured_media && <figure className="p-single-news__image">{article.featured_media && <Image src={article.featured_media.media_details.sizes['1536x1536'].source_url} alt={article.title} fill sizes="50vw" style={{ objectFit: 'cover' }} />}</figure>}
				<div className="p-single-news__content">
					<div className='c-article' dangerouslySetInnerHTML={{ __html: article.content }} />
				</div>
			</div>
		</>
	);
}

```

### app/[lang]/news/[id]/not-found.tsx

```

export default function NotFound() {

  return (
    <div className="">
			404 not found
    </div>
  );
}

```

### app/[lang]/news/page.tsx

```
// import Image from 'next/image';
import { ContentHeader } from '@/components/Layout/ContentHeader';
import NewsItem from '@/components/News/NewsItem';
import { Locale } from '@/constants/site';
import { getFormattedNewsData } from '@/lib/utils';

export default async function Home({ params: { lang } }: { params: { lang: Locale } }) {
	const newsArticles = await getFormattedNewsData(lang);
	// console.log('newsArticles:', newsArticles);

	return (
		<>
			<ContentHeader title="NEWS" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'NEWS' }]} lang={lang} />
			<div className="l-contents__body p-page p-page--no-header p-page-news">
				<div className="p-page-news__items">
					{newsArticles.length > 0 ? (
						newsArticles.map((article) => (
							<div key={article.id} className="p-page-news__item">
								<NewsItem article={article} />
							</div>
						))
					) : (
						<p>ニュースが見つかりません。</p>
					)}
				</div>
			</div>
			{/* <TestLink /> */}
		</>
	);
}

```

### app/[lang]/layout.tsx

```
import { Noto_Sans_JP, Noto_Serif_JP, EB_Garamond, Montserrat } from 'next/font/google';
import type { Metadata } from 'next';
import '@/styles/style.scss';
import './global.css';
import { Locale } from '@/constants/site';
import Script from 'next/script';
import { ScrollBarWidthManager } from '@/components/ScrollBarWidthManager';
import Header from '@/components/Layout/Header';
import Footer from '@/components/Layout/Footer';
import { GoogleAnalytics } from '@next/third-parties/google';
import { METADATA } from '@/constants/metadata';

export const runtime = 'edge';

type Props = {
  params: { lang: Locale }
};

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const metadata = METADATA[params.lang];

  return {
    title: {
      template: `%s ${metadata.separator} ${metadata.title}`,
      default: metadata.title,  // テンプレートを使用しない場合のデフォルト値
    },
    description: metadata.description,
    keywords: metadata.keywords,
    icons: {
      icon: [
        { url: '/favicon.ico' },
        { url: '/icon.png', type: 'image/png' }
      ],
      apple: [
        { url: '/apple-icon.png' }
      ],
    },
    openGraph: {
      title: metadata.title,
      description: metadata.description,
      locale: params.lang,
      type: 'website',
      siteName: metadata.title,
    },
    twitter: {
      card: 'summary_large_image',
      title: metadata.title,
      description: metadata.description,
    },
    alternates: {
      canonical: `https://authentic-japan.com/${params.lang}`,
      languages: {
        'en': '/en',
        'ja': '/ja',
        'fr': '/fr',
      },
    },
  };
}

const notoSansJP = Noto_Sans_JP({
	weight: ['400', '500', '700'],
	subsets: ['latin'],
	display: 'swap',
	variable: '--font-noto-sans-jp'
});

const notoSerifJP = Noto_Serif_JP({
	weight: ['400', '500', '700'],
	subsets: ['latin'],
	display: 'swap',
	variable: '--font-noto-serif-jp'
});

const ebGaramond = EB_Garamond({
	weight: ['400'],
	subsets: ['latin'],
	display: 'swap',
	variable: '--font-eb-garamond'
});

const montserrat = Montserrat({
	weight: ['400'],
	subsets: ['latin'],
	display: 'swap',
	variable: '--font-montserrat'
});

export default async function RootLayout({ children, params: { lang } }: { children: React.ReactNode; params: { lang: Locale } }) {
	return (
		<html lang={lang} className={`${notoSansJP.variable} ${notoSerifJP.variable} ${ebGaramond.variable} ${montserrat.variable}`}>
			<body className='l-body'>
				<GoogleAnalytics gaId="G-1GTCTFWHNM" />
				<ScrollBarWidthManager />
				<Header lang={lang} />
				<main className="l-contents">
					<div className="c-container">{children}</div>
				</main>
				<Footer lang={lang} />
				<Script src="https://widgets.bokun.io/assets/javascripts/apps/build/BokunWidgetsLoader.js?bookingChannelUUID=f34383c7-3179-43f7-a169-d3058ddf6840" strategy="lazyOnload" />
			</body>
		</html>
	);
}

```

### app/[lang]/navigator/[id]/page.tsx

```
import Image from 'next/image';
import { Locale } from '@/constants/site';
// import { useTranslations } from '@/lib/i18n';
import { notFound } from 'next/navigation';
import { getFormattedActivities, getFormattedGuideData, getFormattedNewsData } from '@/lib/utils';
import { ContentHeader } from '@/components/Layout/ContentHeader';
import { TourItem } from '@/components/Tour/TourItem';
import Link from 'next/link';
// import { fetchNewsArticles } from '@/lib/fetchData';
// import NavigatorInfo from '@/components/Navigator/NavigatorInfo';
import NewsItem from '@/components/News/NewsItem';
import { useTranslations } from '@/lib/i18n';

export default async function Page({ params: { lang, id } }: { params: { lang: Locale; id: string } }) {
	const t = useTranslations(lang);
	const guides = await getFormattedGuideData(lang);
	const otherGuides = guides.filter((g) => g.id !== parseInt(id));
	const guide = guides.find((g) => g.id === parseInt(id));
	const activities = await getFormattedActivities({ page: 1, pageSize: 10 }, lang);
	const newsArticles = await getFormattedNewsData(lang);
	const filteredActivities = guide ? activities.filter((activity) => activity.guideIds?.includes(guide.id)) : [];
	const relatedNews = guide ? newsArticles.filter((news) => news.guides?.some((g) => g.id === guide.id)) : [];

	// objectFit値を決定
	const mvAspectRatio = guide?.mv ? guide.mv.width / guide.mv.height : undefined;
	const baseAspectRatio = 1 / 1;
	const objectFit = mvAspectRatio !== undefined && mvAspectRatio < baseAspectRatio ? 'contain' : 'cover';

	// console.log(newsArticles);
	// console.log(guide);

	if (!guide) {
		notFound();
	}

	return (
		<>
			<ContentHeader title="NAVIGATOR" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'NAVIGATORS', href: '/navigator' }, { label: 'NAVIGATOR' }]} lang={lang} />

			<div className="l-contents__body p-page-navigator p-single p-single-navigator">
				<div className="p-single__header u-full-bleed">
					<div className="p-single-navigator__profile c-container">
						<figure className="p-single-navigator__mv">{guide.mv && <Image src={guide.mv.link} alt={guide.name} fill sizes="50vw" style={{ objectFit: objectFit }} />}</figure>
						{guide.copy && <h2 className="p-single-navigator__copy">{guide.copy}</h2>}
						<div className="p-single-navigator__info">
							{guide.regions && guide.regions.length > 0 && (
								<div className="p-single-navigator__region">
									<i className="c-pin"></i>
									<span>{guide.regions.join(', ')}</span>
								</div>
							)}
							{guide.name && <h2 className="p-single-navigator__name">{guide.name}</h2>}
							{guide.title && <h3 className="p-single-navigator__title">{guide.title}</h3>}
							{guide.photo && (
								<figure className="p-single-navigator__photo">
									<Image src={guide.photo.link} alt={guide.name} fill sizes="10vw" style={{ objectFit: 'cover' }} />
								</figure>
							)}
							{guide.tags && guide.tags.length > 0 && (
								<div className="p-single-navigator__tags">
									{guide.tags.map((tag) => (
										<span key={tag.id} className="p-single-navigator__tag c-taxonomy">
											#{tag.name}
										</span>
									))}
								</div>
							)}
							<ul className="p-single-navigator__sns">
								{guide.sns?.instagram && (
									<li>
										<a href={guide.sns.instagram} target="_blank" rel="noopener noreferrer">
											<Image src={'/icon_instagram.svg'} width={15} height={15} alt="" style={{ aspectRatio: 1 / 1 }} />
										</a>
									</li>
								)}
								{guide.sns?.facebook && (
									<li>
										<a href={guide.sns.facebook} target="_blank" rel="noopener noreferrer">
											<Image src={'/icon_fb.svg'} width={15} height={15} alt="" style={{ aspectRatio: 1 / 1 }} />
										</a>
									</li>
								)}
								{guide.sns?.website && (
									<li>
										<a href={guide.sns.website} target="_blank" rel="noopener noreferrer">
											<Image src={'/icon_x.svg'} width={15} height={15} alt="" style={{ aspectRatio: 1 / 1 }} />
										</a>
									</li>
								)}
								{guide.sns?.note && (
									<li>
										<a href={guide.sns.note} target="_blank" rel="noopener noreferrer">
											<Image src={'/icon_note.svg'} width={40} height={8.7} alt="" style={{ aspectRatio: 400 / 87 }} />
										</a>
									</li>
								)}
							</ul>
						</div>
					</div>
				</div>

				<div className="p-single-navigator__description">
					<p dangerouslySetInnerHTML={{ __html: guide.description || '' }} />
					{guide.values && guide.values.length > 0 && (
						<>
							<h2 className="p-single-navigator__values-title">{t({ ja: '私の提供する旅で大切にしたいこと', en: 'What I value in the journey I offer' })}</h2>
							<ul className="p-single-navigator__values">
								{guide.values.map((value, index) => (
									<li key={index} className="p-single-navigator__value">
										<h3>{value.title}</h3>
										<p dangerouslySetInnerHTML={{ __html: value.description }} />
									</li>
								))}
							</ul>
						</>
					)}
				</div>

				{/* <div className="p-page-navigator__profile">
					<figure className="p-page-navigator__mv">{guide.mv && <Image src={guide.mv.link} alt={guide.name} fill sizes="50vw" style={{ objectFit: 'cover' }} />}</figure>
					<div className="p-page-navigator__detail">
						<h2 className="p-page-navigator__copy" dangerouslySetInnerHTML={{ __html: guide.copy || '' }} />
						{guide.regions && guide.regions.length > 0 && (
							<div className="p-page-navigator__region">
								<i className="c-pin"></i>
								<span>{guide.regions.join(', ')}</span>
							</div>
						)}
						<NavigatorInfo className="p-page-navigator__info" guide={guide} lang={lang} />
						<div className="p-page-navigator__tags">
							{guide.tags.map((tag) => (
								<span key={tag.id} className="p-page-navigator__tag c-taxonomy">
									#{tag.name}
								</span>
							))}
						</div>
						<ul className="p-page-navigator__sns">
							<li>
								<a href="#">
									<Image src={'/icon_instagram.svg'} width={15} height={15} alt="" />
								</a>
							</li>
							<li>
								<a href="#">
									<Image src={'/icon_fb.svg'} width={15} height={15} alt="" />
								</a>
							</li>
							<li>
								<a href="#">
									<Image src={'/icon_x.svg'} width={15} height={15} alt="" />
								</a>
							</li>
							<li>
								<a href="#">
									<Image src={'/icon_note.svg'} width={40} height={8.7} alt="" />
								</a>
							</li>
						</ul>
					</div>
					<div className="p-page-navigator__description" dangerouslySetInnerHTML={{ __html: guide.description || '' }} />
				</div> */}

				{filteredActivities.length > 0 && (
					<div className="p-page-navigator-tours">
						<div className="p-page-navigator-tours__title">
							<h2 className="c-heading c-heading--2">TOURS</h2>
						</div>
						<div className="p-page-navigator-tours__tours c-tours">
							{filteredActivities.map((activity) => (
								<TourItem key={activity.id} activity={activity} className="c-tours__tour" />
							))}
						</div>
					</div>
				)}

				{relatedNews.length > 0 && (
					<div className="p-page-navigator-news">
						<div className="p-page-navigator-news__title">
							<h2 className="c-heading c-heading--2">RELATED NEWS</h2>
						</div>
						<div className="p-page-navigator-news__items">
							{relatedNews.map((article) => (
								<div key={article.id} className="p-page-news__item">
									<NewsItem article={article} />
								</div>
							))}
						</div>
					</div>
				)}

				{otherGuides.length > 0 && (
					<div className="p-page-navigator-others">
						<div className="p-page-navigator-others__title">
							<h2 className="c-heading c-heading--2">OTHER NAVIGATORS</h2>
						</div>
						<div className="p-page-navigator-others__items">
							{otherGuides.map((guide) => (
								<div key={guide.id} className="p-page-navigator-others__item">
									<div className="c-navigator-circle u-hover">
										<figure className="c-navigator-circle__thumb">
											<Image src={guide.photo?.link ?? '/no-photo.jpg'} alt={guide.name} fill sizes="10vw" style={{ objectFit: 'cover' }} />
										</figure>

										<h3 className="c-navigator-circle__name">
											<Link href={`/${lang}/navigator/${guide.id}`} className="c-navigator-circle__link">
												{guide.name}
											</Link>
										</h3>
										{guide.regions && guide.regions.length > 0 && (
											<div className="c-navigator-circle__region">
												<i className="c-pin"></i>
												<span>{guide.regions.join(', ')}</span>
											</div>
										)}
									</div>
								</div>
							))}
						</div>
					</div>
				)}
			</div>
		</>
	);
}

```

### app/[lang]/navigator/[id]/not-found.tsx

```

export default function NotFound() {

  return (
    <div className="">
			404 not found
    </div>
  );
}

```

### app/[lang]/navigator/page.tsx

```
import { Locale } from '@/constants/site';
// import { useTranslations } from '@/lib/i18n';
import { getFormattedGuideData } from '@/lib/utils';
import { NavigatorItem } from '@/components/Navigator/NavigatorItem';
import { ContentHeader } from '@/components/Layout/ContentHeader';
import { getWPSiteOptions } from '@/lib/fetchData';
// import Image from 'next/image';
import { PageHeader } from '@/components/Layout/PageHeader';

export default async function Page({ params: { lang } }: { params: { lang: Locale } }) {
	// const t = useTranslations(lang);
	const guides = await getFormattedGuideData(lang);
	const siteOptions = await getWPSiteOptions(lang);
	// console.log('guides:', guides);
	return (
		<>
			<ContentHeader title="NAVIGATORS" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'NAVIGATORS' }]} lang={lang} />
			<div className="l-contents__body p-page p-page-navigators">
			<PageHeader title={siteOptions.navigators_title} description={siteOptions.navigators_description} mv={siteOptions.navigators_mv} />
				{/* <div className="p-page__header u-full-bleed">
					<div className="p-page__inner c-container">
						<h2 className="p-page__title">{siteOptions.navigators_title}</h2>
						<p className="p-page__description" dangerouslySetInnerHTML={{ __html: siteOptions.navigators_description || '' }} />
					</div>
					{siteOptions.navigators_mv && (
						<figure className="p-page__mv">
							<Image src={siteOptions.navigators_mv.sizes['2048x2048']} alt="" fill style={{ objectFit: 'cover' }} />
						</figure>
					)}
				</div> */}
				<div className="p-page-navigators__items u-full-bleed">
					{guides && guides.length > 0 ? (
						guides.map((guide, index) => (
							<div key={index} className="p-page-navigators__item">
								<NavigatorItem lang={lang} guide={guide} />
							</div>
						))
					) : (
						<li>No guides available</li>
					)}
				</div>
			</div>
		</>
	);
}

```

### app/[lang]/tour/page.tsx

```
// 'use client';

// import Image from 'next/image';
import { Locale } from '@/constants/site';
// import { TourItem } from '@/components/Tour/TourItem';
import { getFormattedActivities, getFormattedGuideData, getFormattedRegionData } from '@/lib/utils';
import { ContentHeader } from '@/components/Layout/ContentHeader';
// import { FilterComponent } from '@/components/FilterComponent';
import { ClientFilteredActivities } from '@/components/Tour/ClientFilteredActivities';
import { getWPSiteOptions } from '@/lib/fetchData';
import Image from 'next/image';

export default async function Page({ params: { lang } }: { params: { lang: Locale } }) {

	// const [siteOptions, guides, regions, activities] = await Promise.all([
  //   getWPSiteOptions(lang),
  //   getFormattedGuideData(lang),
  //   getFormattedRegionData(lang),
  //   getFormattedActivities({ page: 1, pageSize: 10 }, lang)
  // ]);

	const siteOptions = await getWPSiteOptions(lang);
	const guides = await getFormattedGuideData(lang);
	const regions = await getFormattedRegionData(lang);
	const activities = await getFormattedActivities({ page: 1, pageSize: 10 }, lang);

	const allTags = Array.from(new Set(activities.flatMap((activity) => activity.tags || []))).map((tag) => ({
		id: tag.id,
		name: tag.name,
		slug: tag.slug
	}));
	// console.log(activities);

	return (
		<>
			<ContentHeader title="TOURS" breadcrumbs={[{ label: 'HOME', href: '/' }, { label: 'TOURS' }]} lang={lang} />
			<div className="l-contents__body p-page p-page-tours">
				<div className="p-page__header u-full-bleed">
					{/* <div className="p-page__inner c-container">
						<h2 className="p-page__title">{siteOptions.navigators_title}</h2>
						<p className="p-page__description" dangerouslySetInnerHTML={{ __html: siteOptions.navigators_description || '' }} />
					</div> */}
					{siteOptions.tours_mv && (
						<figure className="p-page__mv">
							<Image src={siteOptions.tours_mv.sizes['2048x2048']} alt="" fill style={{ objectFit: 'cover' }} />
						</figure>
					)}
				</div>
				<ClientFilteredActivities lang={lang} initialActivities={activities} guides={guides} regions={regions} tags={allTags} />
			</div>
		</>
	);
}

```

### app/[lang]/page.tsx

```
// import { Suspense } from 'react';
import { TourItem } from '@/components/Tour/TourItem';
import { Button } from '@/components/Button';
import { HomeHeroSlider } from '@/components/Home/HomeHeroSlider';
import { HomeNavigatorSlider } from '@/components/Home/HomeNavigatorSlider';
import { HomeRegionSlider } from '@/components/Home/HomeRegionSlider';
import { VideoPlayer } from '@/components/VideoPlayer';
import { INSTAGRAM_URL, Locale } from '@/constants/site';
import { getWPSiteOptions } from '@/lib/fetchData';
// import { useTranslations } from '@/lib/i18n';
import { getFormattedActivities, getFormattedGuideData, getFormattedNewsData, getFormattedRegionData } from '@/lib/utils';
// import { getFormattedActivities, getFormattedGuideData } from '@/lib/utils';
import Image from 'next/image';
import NewsItem from '@/components/News/NewsItem';
import InstagramFeed from '@/components/InstagramFeed';
import Link from 'next/link';
// import Link from 'next/link';

export default async function Page({ params: { lang } }: { params: { lang: Locale } }) {
	// const t = useTranslations(lang);
	const siteOptions = await getWPSiteOptions(lang);
	// const videoId = siteOptions.home_about_video ? siteOptions.home_about_video.split('v=')[1] : '';
	// const videoId = siteOptions.home_about_video;
	// console.log('videoId:', videoId);
	const guides = await getFormattedGuideData(lang);
	const regions = await getFormattedRegionData(lang);
	const activities = await getFormattedActivities({ page: 1, pageSize: 10 }, lang);
	// const newsArticles = await fetchNewsArticles(lang);
	const newsArticles = await getFormattedNewsData(lang);
	// console.log('newsArticles:', newsArticles);

	return (
		<>
			<div className="l-contents__body p-home">
				<div className="p-home-hero u-full-bleed">
					<HomeHeroSlider lang={lang} slides={siteOptions.home_slider} />
				</div>

				<div className="p-home-navigators">
					<h2 className="p-home-navigators__copy">{siteOptions.navigators_title}</h2>
					<p className="p-home-navigators__text" dangerouslySetInnerHTML={{ __html: siteOptions.navigators_description || '' }} />
					<div className="p-home-navigators__slider u-full-bleed">
						<HomeNavigatorSlider lang={lang} guides={guides} />
					</div>
					<div className="p-home-navigators__button">
						<Button href={`/${lang}/navigator`} label="VIEW ALL NAVIGATORS" />
					</div>
				</div>

				<div className="p-home-regions">
					<div className="p-home-regions__header">
						<div className="p-home-regions__title">
							<h2 className="c-heading">REGIONS</h2>
						</div>
						<h3 className="p-home-regions__description" dangerouslySetInnerHTML={{ __html: siteOptions.home_regions_description || '' }} />
					</div>
					<div className="p-home-regions__slider">
						<HomeRegionSlider lang={lang} regions={regions} />
					</div>
					<div className="p-home-regions__button">
						<Button href={`/${lang}/region`} label="VIEW ALL REGIONS" color="light" />
					</div>
				</div>

				<div className="p-home-video">
					<div className="p-home-video__inner u-full-bleed">
						<div className="p-home-video__bg">
							{siteOptions.home_about_mv && (
								<figure className="p-home-video__mv">
									<Image src={siteOptions.home_about_mv.link} alt="" fill sizes="100vw" style={{ objectFit: 'cover' }} />
								</figure>
							)}
							{siteOptions.home_about_video && <VideoPlayer videoUrl={siteOptions.home_about_video} />}
						</div>
						<div className="p-home-video__content c-container">
							<h2 className="p-home-video__title c-heading">
								Authentic <br />
								Destinations
							</h2>
							<h3 className="p-home-video__description" dangerouslySetInnerHTML={{ __html: siteOptions.home_about_description || '' }} />
							{siteOptions.home_about_video && (
								<div className="p-home-video__button1">
								<Button href={siteOptions.home_about_video} target='_blank' label="CONCEPT MOVIE" color="light" />
							</div>
							)}

						</div>
					</div>
					<div className="p-home-video__footer">
						<div className="p-home-video__button2">
							<Button href={`/${lang}/about`} label="ABOUT US" color="light" />
						</div>
					</div>
				</div>

				<div className="p-home-tours">
					<div className="p-home-tours__title">
						<h2 className="c-heading">TOURS</h2>
					</div>
					<div className="p-home-tours__total">
						<div className="c-total">
							<div className="c-total__label">ALL TOURS</div>
							<span className="c-total__count">{activities.length}</span>
						</div>
					</div>
					<div className="p-home-tours__tours c-tours">{activities.length > 0 ? activities.slice(0, 4).map((activity) => <TourItem key={activity.id} activity={activity} className="c-tours__tour" />) : <p>アクティビティが見つかりません。</p>}</div>
					<div className="p-home-tours__button">
						<Button href={`/${lang}/tour`} label="VIEW ALL TOURS" />
					</div>
				</div>

				<div className="p-home-news">
					<div className="p-home-news__inner">
						<div className="p-home-news__title">
							<h2 className="c-heading c-heading--2">NEWS</h2>
						</div>
						<div className="p-home-news__items">
							{newsArticles.length > 0 ? (
								newsArticles.slice(0, 3).map((article) => (
									<div key={article.id} className="p-home-news__item">
										<NewsItem article={article} />
									</div>
								))
							) : (
								<p>ニュースが見つかりません。</p>
							)}
						</div>
					</div>
					<div className="p-home-news__button">
						<Button href={`/${lang}/news`} label="VIEW ALL NEWS" />
					</div>
				</div>

				<div className="p-home-instagram">
					<div className="p-home-instagram__title">
						<h2 className="c-heading c-heading--2">INSTAGRAM</h2>
					</div>
					<div className="p-home-instagram__link">
						<Link href={`${INSTAGRAM_URL}`} target="_blank">
							@authentic_japan_official
						</Link>
					</div>
					<div className="p-home-instagram__feed u-full-bleed">
						<InstagramFeed />
					</div>
				</div>
			</div>
		</>
	);
}

```

### postcss.config.mjs

```
const config = {
	plugins: {
		'@tailwindcss/postcss': {}
	}
};
export default config;

```

### constants/site.ts

```
// Place any global data in this file.
// You can import this data from anywhere in your site by using the `import` keyword.

export const SITE_URL = 'https://transformativetour.pages.dev/';
export const SITE_TITLE = 'AUTHENTIC JAPAN';
export const SITE_DESCRIPTION = 'A Gathering of Passionate Navigators Providing Transformative Travel in Japan';
export const INSTAGRAM_URL = 'https://www.instagram.com/authentic_japan_official/';

export const LOCALES = ['en', 'ja', 'fr'] as const;
export type Locale = (typeof LOCALES)[number];
export const DEFAULT_LOCALE = 'ja' as Locale;

export const NAVI_ITEMS = [
	{ label: 'NAVIGATORS', href: `/navigator` },
	{ label: 'TOURS', href: `/tour` },
	{ label: 'REGIONS', href: `/region` },
	{ label: 'NEWS', href: `/news` },
	{ label: 'ABOUT US', href: `/about` },
	{ label: 'CONTACT', href: `/contact` },
];

export const FOOTER_NAVI_ITEMS = [
	{ label: 'HOME', href: `/` },
	{ label: 'NAVIGATORS', href: `/navigator` },
	{ label: 'REGIONS', href: `/region` },
	{ label: 'ABOUT US', href: `/about` },
	{ label: 'TOURS', href: `/tour` },
	{ label: 'NEWS', href: `/news` },
	{ label: 'CONTACT', href: `/contact` }
];

```

### constants/metadata.ts

```
// constants/metadata.ts
import { Locale } from '@/constants/site';

type MetadataType = {
  title: string;
  separator: string;
  description: string;
  keywords: string;
};

export const METADATA: Record<Locale, MetadataType> = {
  ja: {
    title: "Authentic Japan - 心に響く本物の旅",
    separator: " | ",
    description: "地域に根ざしたナビゲーターと共に、日本各地の本質的な体験を提供します。文化や伝統に深く触れる旅をご案内します。",
    keywords: "日本旅行, 文化体験, 伝統文化, ローカルガイド, 体験ツアー",
  },
  en: {
    title: "Authentic Japan - Transformative Travel Experiences",
    separator: " | ",
    description: "Discover authentic Japanese experiences with local navigators. Immerse yourself in cultural journeys across Japan's diverse regions.",
    keywords: "Japan travel, authentic experience, cultural tours, local guides, Japanese culture",
  },
  fr: {
    title: "Authentic Japan - Expériences de Voyage Transformatives",
    separator: " | ",
    description: "Découvrez des expériences japonaises authentiques avec des navigateurs locaux. Immergez-vous dans des voyages culturels à travers les diverses régions du Japon.",
    keywords: "voyage au Japon, expérience authentique, visites culturelles, guides locaux, culture japonaise",
  },
};

```

### next.config.mjs

```
/** @type {import('next').NextConfig} */
const nextConfig = {
	reactStrictMode: true,
	images: {
		domains: ['shimatoworks.xsrv.jp', 'bokun.s3.amazonaws.com', 'imgcdn.bokun.tools', 'placehold.jp']
	}
};

export default nextConfig;

```

### README.md

```
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

```

### components/InstagramFeed.tsx

```
'use client';

import React, { useEffect } from 'react';
import Script from 'next/script';

declare global {
  interface Window {
    elfsight?: {
      initialize: () => void;
    };
  }
}

export default function InstaFeed() {
  useEffect(() => {
    window.elfsight?.initialize();
  }, []);

  return (
    <div>
      <Script
        src="https://static.elfsight.com/platform/platform.js"
        strategy="lazyOnload"
        onLoad={() => {
          window.elfsight?.initialize();
        }}
      />
      <div className="elfsight-app-9b32843e-3af8-4ccd-8e69-9f6637341c8a" data-elfsight-app-lazy></div>
    </div>
  );
}

```

### components/ui/label.tsx

```
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

### components/ui/button.tsx

```
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

```

### components/ui/checkbox.tsx

```
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

```

### components/ui/textarea.tsx

```
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

```

### components/ui/input.tsx

```
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

```

### components/ui/form.tsx

```
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

```

### components/Home/HomeNavigatorSlider.tsx

```
'use client';

import { Swiper, SwiperSlide } from 'swiper/react';
import type { Swiper as SwiperType } from 'swiper';
import { Navigation, Autoplay } from 'swiper/modules';
import 'swiper/css';
// import 'swiper/css/free-mode';
import 'swiper/css/autoplay';
import 'swiper/css/navigation';
import { Guide } from '@/types';
import { Locale } from '@/constants/site';
import { useState, useRef, useEffect } from 'react';
import Image from 'next/image';
import { NavigatorCard } from '@/components/Navigator/NavigatorCard';

export function HomeNavigatorSlider({ lang, guides }: { lang: Locale; guides: Guide[] }) {
	const [activeIndex, setActiveIndex] = useState(0);
	const [spaceBetween, setSpaceBetween] = useState(40);
	const swiperRef = useRef<SwiperType | null>(null);

	const handleGuideClick = (index: number) => {
		if (swiperRef.current) {
			const realIndex = index % guides.length;
			swiperRef.current.slideToLoop(realIndex, 300);
		}
	};

	useEffect(() => {
		const handleResize = () => {
			if (window.innerWidth < 768) {
				setSpaceBetween(20); // スマートフォンサイズの場合
			} else {
				setSpaceBetween(40); // それ以外の場合
			}
		};

		handleResize(); // 初期化時に一度実行

		window.addEventListener('resize', handleResize);
		return () => window.removeEventListener('resize', handleResize);
	}, []);

	return (
		<div className="p-home-navigators-slider">
			<Swiper
				modules={[Autoplay, Navigation]}
				spaceBetween={spaceBetween}
				slidesPerView={1}
				initialSlide={1}
				autoplay={{
					delay: 8000,
					disableOnInteraction: false
				}}
				// speed={300}
				onSwiper={(swiper) => {
					swiperRef.current = swiper;
					setActiveIndex(swiper.realIndex);
				}}
				onSlideChange={(swiper) => setActiveIndex(swiper.realIndex)}
				className="p-home-navigators-slider__slider">
				{guides.map((guide, index) => (
					<SwiperSlide key={`${guide.id}-${index}`}>
						<NavigatorCard lang={lang} guide={guide} />
					</SwiperSlide>
				))}
			</Swiper>
			<div className="p-home-navigators-slider__navi c-container">
				<div className="p-home-navigators-slider__navi-total">
					<div className="c-total">
						<div className="c-total__label">NAVIGATORS</div>
						<span className="c-total__count">{guides.length}</span>
					</div>
				</div>
				<div className="p-home-navigators-slider__navi-items">
					{guides.map((guide, index) => (
						<button key={guide.id} className={`p-home-navigators-slider__navi-item c-navigator-circle u-hover ${index === activeIndex ? 'is-active' : ''}`} onClick={() => handleGuideClick(index)}>
							<figure className="c-navigator-circle__thumb">
								<Image src={guide.photo?.link ?? '/no-photo.jpg'} alt={guide.name} fill sizes="20vw" style={{ objectFit: 'cover' }} />
							</figure>
							<h3 className="c-navigator-circle__name">{guide.name}</h3>
							{guide.regions && guide.regions.length > 0 && (
								<div className="c-navigator-circle__region">
									<i className="c-pin"></i>
									<span>{guide.regions.join(', ')}</span>
								</div>
							)}
						</button>
					))}
				</div>
			</div>
		</div>
	);
}

```

### components/Home/HomeRegionSlider.tsx

```
'use client';

import { Swiper, SwiperSlide } from 'swiper/react';
import { EffectFade, Navigation, Autoplay, Pagination } from 'swiper/modules';
import type { Swiper as SwiperType } from 'swiper';
import 'swiper/css';
import 'swiper/css/effect-fade';
import 'swiper/css/navigation';
import 'swiper/css/autoplay';
import 'swiper/css/pagination';
import { Locale } from '@/constants/site';
import { useEffect, useState, useRef } from 'react';
import Image from 'next/image';
import { Region } from '@/types';
import { Button } from '@/components/Button';

export function HomeRegionSlider({ regions }: { lang: Locale; regions: Region[] }) {
	const [activeIndex, setActiveIndex] = useState(0);
	const swiperRef = useRef<SwiperType | null>(null);

	useEffect(() => {
		const handleResize = () => {
			// リサイズ時の処理があれば、ここに記述
		};

		handleResize(); // 初期化時に一度実行

		window.addEventListener('resize', handleResize);
		return () => window.removeEventListener('resize', handleResize);
	}, []);

	const handleRegionClick = (index: number) => {
		setActiveIndex(index);
		if (swiperRef.current) {
			swiperRef.current.slideTo(index);
		}
	};

	return (
		<div className="p-home-regions-slider">
			<div className="p-home-regions-slider__navi">
				<div className="p-home-regions-slider__navi-total">
					<div className="c-total">
						<div className="c-total__label">REGIONS</div>
						<span className="c-total__count">{regions.length}</span>
					</div>
				</div>
				<div className="p-home-regions-slider__navi-items">
					{regions.map((region, index) => (
						<button key={region.id} className={`p-home-regions-slider__navi-item ${index === activeIndex ? 'is-active' : ''}`} onClick={() => handleRegionClick(index)}>
							<i></i>
							<span>{region.name}</span>
						</button>
					))}
				</div>
			</div>
			<div className="p-home-regions-slider__content">
				<Swiper
					modules={[EffectFade, Navigation, Autoplay, Pagination]}
					effect="fade"
					fadeEffect={{ crossFade: true }}
					// navigation
					autoplay={{
						delay: 5000,
						disableOnInteraction: false
					}}
					speed={1000}
					pagination={{
						type: 'progressbar'
					}}
					onSwiper={(swiper) => (swiperRef.current = swiper)}
					onSlideChange={(swiper) => setActiveIndex(swiper.activeIndex)}
					className="p-home-regions-slider__slider">
					{regions.map((region, index) => (
						<SwiperSlide key={index}>
							<div className="p-home-regions-slider-slide">
								<div className="p-home-regions-slider-slide__top">
									<figure className="p-home-regions-slider-slide__mv">
										<Image src={region.mv} alt={region.name} fill sizes="50vw" style={{ objectFit: 'cover' }} />
									</figure>
									<figure className="p-home-regions-slider-slide__map">
										<Image src={`/map.png`} alt={region.name} width={280} height={228} />
									</figure>
									<div className="p-home-regions-slider-slide__label">
										<div>
											<i className="c-pin"></i>
											<span>{region.name}</span>
										</div>
									</div>
								</div>
								<div className="p-home-regions-slider-slide__bottom">
									<div className="p-home-regions-slider-slide__button">
									<Button href={`/region#region${region.id}`} label="VIEW DETAIL" color="light" />
									</div>
									<p className="p-home-regions-slider-slide__description" dangerouslySetInnerHTML={{ __html: region.description || '' }} />
								</div>
							</div>
						</SwiperSlide>
					))}
				</Swiper>
			</div>
		</div>
	);
}

```

### components/Home/HomeHeroSlider.tsx

```
'use client';

import { Swiper, SwiperSlide } from 'swiper/react';
import { EffectFade, Navigation, Autoplay, Pagination, Parallax } from 'swiper/modules';
import type { Swiper as SwiperType } from 'swiper';
import 'swiper/css';
import 'swiper/css/effect-fade';
import 'swiper/css/navigation';
import 'swiper/css/autoplay';
import 'swiper/css/pagination';
import { Locale } from '@/constants/site';
import { useRef } from 'react';
import Image from 'next/image';
import { WPSiteContent } from '@/types';
// import Link from 'next/link';
import { Button } from '@/components/Button';

export function HomeHeroSlider({ slides }: { lang: Locale; slides: WPSiteContent['home_slider'] }) {
	// const [activeIndex, setActiveIndex] = useState(0);
	const swiperRef = useRef<SwiperType | null>(null);

	// const handleRegionClick = (index: number) => {
	// 	setActiveIndex(index);
	// 	if (swiperRef.current) {
	// 		swiperRef.current.slideTo(index);
	// 	}
	// };

	return (
		<Swiper
			modules={[EffectFade, Navigation, Autoplay, Pagination, Parallax]}
			effect="fade"
			fadeEffect={{ crossFade: true }}
			// navigation={true}
			autoplay={{
				delay: 5000,
				disableOnInteraction: false
			}}
			parallax={true}
			speed={1000}
			pagination={{
				type: 'progressbar'
			}}
			onSwiper={(swiper) => (swiperRef.current = swiper)}
			// onSlideChange={(swiper) => setActiveIndex(swiper.activeIndex)}
			className="p-home-hero-slider__slider">
			{slides.map((slide, index) => (
				<SwiperSlide key={index} className="p-home-hero-slider-slide">
					{slide.mv && (
						<figure className="p-home-hero-slider-slide__image">
							<Image src={slide.mv.link} alt="" fill sizes="100vw" style={{ objectFit: 'cover' }} />
						</figure>
					)}
					<div className="p-home-hero-slider-slide__inner">
						<hgroup className="p-home-hero-slider-slide__title">
							{slide.sub_copy && <h3 data-swiper-parallax="-30">{slide.sub_copy}</h3>}
							{slide.main_copy && <h2 data-swiper-parallax="-60" dangerouslySetInnerHTML={{ __html: slide.main_copy || '' }} />}
						</hgroup>
						{slide.url && <Button href={slide.url} label="LEARN MORE" color="light" className="p-home-hero-slider-slide__button" />}
					</div>
				</SwiperSlide>
			))}
		</Swiper>
	);
}

```

### components/Contact/ContactForm.tsx

```
'use client';

import { Locale } from '@/constants/site';
import { useTranslations } from '@/lib/i18n';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../ui/form';
import { Input } from '../ui/input';
import { Textarea } from '../ui/textarea';
import { Button } from '../ui/button';
import { Checkbox } from '../ui/checkbox';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { ContactFormData, getContactFormSchema } from '@/lib/validations/contact';
import { useState } from 'react';

const SSGFORM_URL = 'https://ssgform.com/s/Dwe48gfBEyBU';

export default function ContactForm({ lang }: { lang: Locale }) {
	const [submitStatus, setSubmitStatus] = useState<{
		type: 'success' | 'error' | null;
		message: string | null;
	}>({ type: null, message: null });

	const form = useForm<ContactFormData>({
		resolver: zodResolver(getContactFormSchema(lang)),
		defaultValues: {
			name: '',
			email: '',
			body: '',
			privacyPolicy: false
		}
	});
	const t = useTranslations(lang);

	async function onSubmit(data: ContactFormData) {
		try {
			const formData = new FormData();
			formData.append(t({ ja: 'お名前', en: 'Name', fr: 'Nom' }), data.name);
			formData.append(t({ ja: 'メールアドレス', en: 'Email', fr: 'E-mail' }), data.email);
			formData.append(t({ ja: 'お問い合わせ内容', en: 'Inquiry details', fr: 'Détails de la demande' }), data.body);

			const response = await fetch(SSGFORM_URL, {
				method: 'POST',
				headers: {
					'X-Requested-With': 'XMLHttpRequest' // このヘッダーを追加
				},
				body: formData
			});

			if (response.ok) {
				setSubmitStatus({
					type: 'success',
					message: t({
						ja: '送信が完了しました。お問い合わせありがとうございます。',
						en: 'Message sent successfully. Thank you for your inquiry.',
						fr: 'Message envoyé avec succès. Merci pour votre demande.'
					})
				});
				form.reset();
			} else {
				throw new Error('送信に失敗しました');
			}
		} catch {
			setSubmitStatus({
				type: 'error',
				message: t({
					ja: '送信に失敗しました。時間をおいて再度お試しください。',
					en: 'Failed to send message. Please try again later.',
					fr: "Échec de l'envoi du message. Veuillez réessayer plus tard."
				})
			});
		}
	}

	return (
		<Form {...form}>
			<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
				{submitStatus.type && <div className={`p-4 rounded-md ${submitStatus.type === 'success' ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>{submitStatus.message}</div>}

				<FormField
					control={form.control}
					name="name"
					render={({ field }) => (
						<FormItem>
							<FormLabel>
								{t({
									ja: 'お名前',
									en: 'Name',
									fr: 'Nom'
								})}
							</FormLabel>
							<FormControl>
								<Input
									placeholder={t({
										ja: '山田 太郎',
										en: 'John Doe',
										fr: 'Jean Dupont'
									})}
									{...field}
								/>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>
				<FormField
					control={form.control}
					name="email"
					render={({ field }) => (
						<FormItem>
							<FormLabel>
								{t({
									ja: 'メールアドレス',
									en: 'Email',
									fr: 'E-mail'
								})}
							</FormLabel>
							<FormControl>
								<Input
									type="email"
									placeholder={t({
										ja: 'taro@example.com',
										en: 'john@example.com',
										fr: 'jean@example.com'
									})}
									{...field}
								/>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>
				<FormField
					control={form.control}
					name="body"
					render={({ field }) => (
						<FormItem>
							<FormLabel>
								{t({
									ja: 'お問い合わせ内容',
									en: 'Inquiry details',
									fr: 'Détails de la demande'
								})}
							</FormLabel>
							<FormControl>
								<Textarea
									placeholder={t({
										ja: 'お問い合わせ内容を入力してください',
										en: 'Please enter your inquiry details',
										fr: 'Veuillez saisir les détails de votre demande'
									})}
									className="min-h-[120px]"
									{...field}
								/>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>
				<FormField
					control={form.control}
					name="privacyPolicy"
					render={({ field }) => (
						<FormItem className="flex flex-row items-start space-x-3 space-y-0">
							<FormControl>
								<Checkbox checked={field.value} onCheckedChange={field.onChange} />
							</FormControl>
							<div className="space-y-1 leading-none">
								<FormLabel>
									<span>
										{t({
											ja: '利用規約に同意する',
											en: 'Terms of Service',
											fr: "Conditions d'utilisation"
										})}
									</span>
									<a href="/terms" target="_blank" rel="noopener noreferrer" className="ml-1 text-primary underline hover:no-underline">
										{t({
											ja: '（利用規約を読む）',
											en: '(Read Terms of Service)',
											fr: "(Lire les conditions d'utilisation)"
										})}
									</a>
								</FormLabel>
								<FormMessage className='mt-4' />
							</div>
						</FormItem>
					)}
				/>
				<Button type="submit" disabled={form.formState.isSubmitting} className="w-full">
					{form.formState.isSubmitting
						? t({
								ja: '送信中...',
								en: 'Submitting...',
								fr: 'Envoi en cours...'
						  })
						: t({
								ja: '送信',
								en: 'Submit',
								fr: 'Envoyer'
						  })}
				</Button>
			</form>
		</Form>
	);
}

```

### components/Layout/PageHeader.tsx

```
'use client';

import { WPGalleryItem } from '@/types';
import Image from 'next/image';
import { useEffect, useState } from 'react';

interface PageHeaderProps {
  title?: string;
  description?: string;
  mv?: WPGalleryItem;
}

export function PageHeader({ title, description, mv }: PageHeaderProps) {
  const [content, setContent] = useState<string | null>(null);

  useEffect(() => {
    if (description) {
      setContent(description);
    }
  }, [description]);

  return (
    <div className="p-page__header u-full-bleed">
      <div className="p-page__inner c-container">
        {title && <h2 className="p-page__title">{title}</h2>}
        {content && (
          <p
            className="p-page__description"
            dangerouslySetInnerHTML={{ __html: content }}
          />
        )}
      </div>
      {mv && mv.sizes && mv.sizes['2048x2048'] && (
        <figure className="p-page__mv">
          <Image
            src={mv.sizes['2048x2048']}
            alt=""
            fill
            style={{ objectFit: 'cover' }}
          />
        </figure>
      )}
    </div>
  );
}

```

### components/Layout/ContentHeader.tsx

```
import Link from 'next/link';
import { Locale } from '@/constants/site';

interface Breadcrumb {
  label: string;
  href?: string;
}

interface ContentHeaderProps {
  title: string;
  breadcrumbs: Breadcrumb[];
  lang: Locale;
}

export function ContentHeader({ title, breadcrumbs, lang }: ContentHeaderProps) {
  return (
    <div className="l-contents__header">
      <h1 className="l-contents__title">{title}</h1>
      <ul className="l-contents__breadcrumb">
        {breadcrumbs.map((crumb, index) => (
          <li key={index}>
            {crumb.href ? (
              <Link href={`/${lang}${crumb.href}`}>{crumb.label}</Link>
            ) : (
              crumb.label
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

```

### components/Layout/Footer.tsx

```
import { FOOTER_NAVI_ITEMS, INSTAGRAM_URL, Locale } from '@/constants/site';
import { getFormattedRegionData } from '@/lib/utils';
import Link from 'next/link';
// import React from 'react';

export default async function Footer({ lang }: { lang: Locale }) {
	const regions = await getFormattedRegionData(lang);

	return (
		<div className="l-footer">
			<nav className="l-footer__navi">
				<ul>
					{FOOTER_NAVI_ITEMS.map((item, index) => (
						<li key={index}>
							{item.label === 'REGIONS' ? (
								<>
									<Link href={`/${lang}${item.href}`}>{item.label}</Link>
									<ul>
										{regions.map((region) => (
											<li key={region.id}>
												<Link href={`/region#region${region.id}`}>{region.name}</Link>
											</li>
										))}
									</ul>
								</>
							) : (
								<Link href={`/${lang}${item.href}`}>{item.label}</Link>
							)}
						</li>
					))}
				</ul>
			</nav>
			<nav className="l-footer__navi-sub">
				<ul>
					<li>
						<Link href={`${INSTAGRAM_URL}`} target='_blank'>INSTAGRAM</Link>
					</li>
					<li>
						<Link href={`/${lang}/terms`}>TERMS OF USE</Link>
					</li>
				</ul>
			</nav>
			<div className="l-footer__copyright">
				<p>&copy; 2024 Authentic Japan</p>
			</div>
		</div>
	);
}

```

### components/Layout/Header.tsx

```
'use client';

import { INSTAGRAM_URL, Locale, NAVI_ITEMS, SITE_TITLE } from '@/constants/site';
import Link from 'next/link';
import React, { useRef, useState } from 'react';
import LanguageSwitcher from '@/components/LanguageSwitcher';
import Image from 'next/image';
import clsx from 'clsx';
import { ArrowUpRight } from 'lucide-react';
import treeImage from '@/public/header/tree.webp';

// import { getFormattedRegionData } from '@/lib/utils';
// import { usePathname } from 'next/navigation';

export default function Header({ lang }: { lang: Locale }) {
	// const pathname = usePathname();
	const [isOpen, setIsOpen] = useState(false);
	// const [isAfterMarker, setIsAfterMarker] = useState(false);
	const headerRef = useRef<HTMLElement>(null);
	// const regions = getFormattedRegionData(lang);
	// console.log('regions:', regions);

	// ヘッダーのクラス制御
	// const getHeaderClasses = useCallback(() => {
	// 	return clsx('l-header', {
	// 		'l-header--light': pathname === `/${lang}` || pathname.startsWith(`/${lang}/tours/`),
	// 	});
	// }, [pathname, lang]);

	const toggleDrawer = () => {
		setIsOpen(!isOpen);
		// console.log('isOpen:', isOpen);
	};
	return (
		<>
			<header ref={headerRef} className={`l-header`}>
				<h1 className="l-header__title">
					<Link href={`/${lang}`}>
						<Image src="/logo.svg" alt={SITE_TITLE} unoptimized fill />
					</Link>
				</h1>
				<div className="l-header__inner">
					<div className="l-header__navi">
						<ul>
							{NAVI_ITEMS.map((item, index) => (
								<li key={index}>
									<Link href={`/${lang}${item.href}`}>{item.label}</Link>
								</li>
							))}
						</ul>
					</div>
					<div className="l-header__lang">
						<LanguageSwitcher currentLang={lang} />
					</div>
				</div>
				<div className="l-header__trigger">
					<button className={clsx('c-trigger', { 'is-open': isOpen })} aria-label="menu" aria-expanded={isOpen} aria-controls="navigation-drawer" onClick={toggleDrawer}>
						<div className="c-trigger__inner">
							<span className="c-trigger__line"></span>
							<span className="c-trigger__line"></span>
						</div>
						{/* Menu */}
					</button>
				</div>
			</header>
			<div className={clsx('l-drawer', { 'is-open': isOpen })}>
				<div className="l-drawer__image">
					<Image src={treeImage} alt="tree" fill className="object-cover" />
				</div>
				<div className="l-drawer__content">
					<nav className="l-drawer__navi">
						<ul>
							<li>
								<Link href={`/${lang}}`}>HOME</Link>
							</li>
							{NAVI_ITEMS.map((item, index) => (
								<li key={index}>
									<Link href={`/${lang}${item.href}`} onClick={toggleDrawer}>
										{item.label}
									</Link>
								</li>
							))}
						</ul>
					</nav>
					<div className="l-drawer__footer">
						<ul>
							<li>
								<Link href={INSTAGRAM_URL} target="_blank" onClick={toggleDrawer}>
									<span>INSTAGRAM</span>
									<ArrowUpRight />
								</Link>
							</li>
							<li>
								<Link href={`/${lang}/terms`} onClick={toggleDrawer}>
									<span>TERMS OF USE</span>
								</Link>
							</li>
						</ul>
						<div className="l-drawer__lang">
							<LanguageSwitcher currentLang={lang} />
						</div>
					</div>
				</div>
			</div>
		</>
	);
}

```

### components/Region/RegionSlider.tsx

```
'use client';

import { Swiper, SwiperSlide } from 'swiper/react';
import { EffectFade, Navigation, Autoplay, Pagination } from 'swiper/modules';
import type { Swiper as SwiperType } from 'swiper';
import 'swiper/css';
import 'swiper/css/effect-fade';
import 'swiper/css/navigation';
import 'swiper/css/autoplay';
import 'swiper/css/pagination';
import { useEffect, useState, useRef } from 'react';
import Image from 'next/image';
import { WPGalleryItem } from '@/types';

export function RegionSlider({ images }: { images: WPGalleryItem[] }) {
	const [activeIndex, setActiveIndex] = useState(0);
	const swiperRef = useRef<SwiperType | null>(null);

	useEffect(() => {
		const handleResize = () => {
			// リサイズ時の処理があれば、ここに記述
		};

		handleResize(); // 初期化時に一度実行

		window.addEventListener('resize', handleResize);
		return () => window.removeEventListener('resize', handleResize);
	}, []);

	const handleRegionClick = (index: number) => {
		setActiveIndex(index);
		if (swiperRef.current) {
			swiperRef.current.slideTo(index);
		}
	};

	return (
		<div className="c-region-slider">
			<div className="c-region-slider__content">
				<Swiper
					modules={[EffectFade, Navigation, Autoplay, Pagination]}
					effect="fade"
					fadeEffect={{ crossFade: true }}
					// navigation
					autoplay={{
						delay: 5000,
						disableOnInteraction: false
					}}
					speed={1000}
					// pagination={{
					// 	type: 'progressbar'
					// }}
					onSwiper={(swiper) => (swiperRef.current = swiper)}
					onSlideChange={(swiper) => setActiveIndex(swiper.activeIndex)}
					className="c-region-slider__slider">
					{images.map((image, index) => (
						<SwiperSlide key={index} className='c-region-slider__slide'>
							<Image src={image.sizes['1536x1536']} alt="" fill sizes="100vw" style={{ objectFit: 'contain' }} />
						</SwiperSlide>
					))}
				</Swiper>
			</div>
			<div className="c-region-slider__navi">
				<div className="c-region-slider__navi-items">
					{images.map((image, index) => (
						<button key={index} className={`c-region-slider__navi-item ${index === activeIndex ? 'is-active' : ''}`} onClick={() => handleRegionClick(index)}>
							<Image src={image.sizes['1536x1536']} alt="" fill sizes="100vw" style={{ objectFit: 'cover' }} />
						</button>
					))}
				</div>
			</div>
		</div>
	);
}

```

### components/News/NewsItem.tsx

```
// import { Locale } from '@/constants/site';
import { News } from '@/types';
import NavigatorInfo from '../Navigator/NavigatorInfo';
import Image from 'next/image';
import Link from 'next/link';
// import { Locale } from '@/constants/site';

export default function NewsItem({ article }: { article: News }) {
	// console.log('featured_media:', article.featured_media);
	return (
		<div className="c-news">
			<div className="c-news__inner">
				<figure className="c-news__thumbnail">
					<Image src={article.featured_media?.media_details.sizes.large.source_url ?? '/default-image.jpg'} alt="" fill sizes="50vw" style={{ objectFit: 'cover' }} />
				</figure>
				<div className="c-news__content">
					<time className="c-news__date">{article.date}</time>
					<h2 className="c-news__title">
						<Link href={`/news/${article.id}`}>{article.title}</Link>
					</h2>
					{article.categories && article.categories.length > 0 && (
						<div className="c-news__categories">
							{article.categories.map((category) => (
								<span key={category.id} className="c-news__category c-taxonomy">
									{category.name}
								</span>
							))}
						</div>
					)}
					{article.guides && article.guides.length > 0 && (
						<div className="c-news__guides">
							{article.guides.map((guide) => (
								<div key={guide.id} className="c-news__guide">
									<NavigatorInfo guide={guide}/>
								</div>
							))}
						</div>
					)}
				</div>
			</div>
		</div>
	);
}

```

### components/Navigator/NavigatorInfo.tsx

```
import { Guide } from '@/types';
import Image from 'next/image';
import Link from 'next/link';
import { Locale } from '@/constants/site';
import clsx from 'clsx';

interface NavigatorInfoProps {
	className?: string;
  guide: Guide;
  link?: boolean;
  lang?: Locale;
}

export default function NavigatorInfo({ guide, link, lang, className }: NavigatorInfoProps) {
  const content = (
		<div className={clsx('c-navigator-info', className)}>
      <div className="c-navigator-info__photo">
        <Image
          src={guide.photo?.link ?? '/default-image.jpg'}
          alt=""
          fill
          sizes="20vw"
          style={{ objectFit: 'cover' }}
        />
      </div>
      <div className="c-navigator-info__content">
        <h3 className="c-navigator-info__name">{guide.name}</h3>
        <p className="c-navigator-info__title">{guide.title}</p>
      </div>
    </div>
  );

  if (link && lang) {
    return (
      <Link href={`/${lang}/navigator/${guide.id}`} className="c-navigator-info__link">
        {content}
      </Link>
    );
  }

  return content;
}

```

### components/Navigator/NavigatorCard.tsx

```
'use client';

import { Locale } from '@/constants/site';
import { Guide } from '@/types';
import Image from 'next/image';
// import { useTranslations } from '@/lib/i18n';
import Link from 'next/link';

export function NavigatorCard({ lang, guide }: { lang: Locale; guide: Guide }) {
	// const t = useTranslations(lang);
	return (
		<Link href={`/${lang}/navigator/${guide.id}`} className="c-navigator-card">
			<figure className="c-navigator-card__image">
				<Image src={guide.mv?.sizes['1536x1536'] ?? '/default-image.jpg'} alt="" fill sizes="50vw" style={{ objectFit: 'cover' }} />
			</figure>
			<div className="c-navigator-card__inner">
				<h3 className="c-navigator-card__copy">
					<p>{guide.copy}</p>
				</h3>
				{guide.regions && guide.regions.length > 0 && (
					<div className="c-navigator-card__region">
						<i className="c-pin"></i>
						<span>{guide.regions.join(', ')}</span>
					</div>
				)}
				<div className="c-navigator-card__cols">
					<div className="c-navigator-card__col-left">
						<div className="c-navigator-card__photo">
							<Image src={guide.photo?.link ?? '/default-image.jpg'} alt="" fill sizes="20vw" style={{ objectFit: 'cover' }} />
						</div>
					</div>
					<div className="c-navigator-card__col-right">
						<h2 className="c-navigator-card__name">{guide.name}</h2>
						<h3 className="c-navigator-card__title">{guide.title}</h3>
					</div>
				</div>
				<div className="c-navigator-card__tags">
					{guide.tags.map((tag) => (
						<span key={tag.id} className="c-navigator-card__tag">
							#{tag.name}
						</span>
					))}
				</div>
			</div>
		</Link>
	);
}

```

### components/Navigator/NavigatorItem.tsx

```
import { Locale } from '@/constants/site';
import { Guide } from '@/types';
import Image from 'next/image';
// import { useTranslations } from '@/lib/i18n';
import Link from 'next/link';
import NavigatorInfo from './NavigatorInfo';

export function NavigatorItem({ lang, guide }: { lang: Locale; guide: Guide }) {
	// const t = useTranslations(lang);
	return (
		<div className="c-navigator">
			<div className="c-navigator__header">
				<Link href={`/${lang}/navigator/${guide.id}`} className="c-navigator__link">
					<h3 className="c-navigator__copy">
						<p>{guide.copy}</p>
					</h3>
					<figure className="c-navigator__image">
						<Image src={guide.mv?.link ?? '/no-photo.jpg'} alt="" fill sizes="50vw" style={{ objectFit: 'cover' }} />
					</figure>
				</Link>
			</div>
			<div className="c-navigator__body">
				{guide.regions && guide.regions.length > 0 && (
					<div className="c-navigator__region">
						<i className="c-pin"></i>
						<span>{guide.regions.join(', ')}</span>
					</div>
				)}
				<NavigatorInfo className="c-navigator__info" guide={guide} link lang={lang}  />
				{/* <h2 className="c-navigator__name">
					<Link href={`/navigator/${guide.id}`}>{guide.name}</Link>
				</h2>
				<h2 className="c-navigator__title">{guide.title}</h2> */}
				<div className="c-navigator__tags">
					{guide.tags.map((tag) => (
						<span key={tag.id} className="c-navigator__tag c-taxonomy">
							#{tag.name}
						</span>
					))}
				</div>
			</div>
		</div>
	);
}

```

### components/Tour/ClientFilteredActivities.tsx

```
'use client';

import React, { useState, useCallback } from 'react';
import { Activity, Guide, Region } from '@/types';
import { TourItem } from '@/components/Tour/TourItem';
import { FilterComponent } from '@/components/Tour/FilterComponent';
import { filterActivities } from '@/lib/utils';
import { Locale } from '@/constants/site';

interface ClientFilteredActivitiesProps {
	lang: Locale;
	initialActivities: Activity[];
	guides: Guide[];
	regions: Region[];
	tags: { id: number; name: string; slug: string }[];
}

export function ClientFilteredActivities({ initialActivities, guides, regions, tags, lang }: ClientFilteredActivitiesProps) {
	const [filteredActivities, setFilteredActivities] = useState(initialActivities);
	const handleFilterChange = useCallback(
		(newFilters: { guideId: number | null; regionId: number | null; tagIds: number[] }) => {
			const filtered = filterActivities(initialActivities, newFilters, guides, regions);
			setFilteredActivities(filtered);
		},
		[initialActivities, guides, regions]
	);

	return (
		<>
			<div className="p-page-tours__filter">
				<FilterComponent guides={guides} regions={regions} tags={tags} onFilterChange={handleFilterChange} lang={lang} />
			</div>
			<div className="p-page-tours__tours c-tours">{filteredActivities.length > 0 ? filteredActivities.map((activity) => <TourItem key={activity.id} activity={activity} className="c-tours__tour" />) : <p>ツアーが見つかりません。</p>}</div>
		</>
	);
}

```

### components/Tour/TourButton.tsx

```
'use client';

import { ReactNode } from 'react';
import clsx from 'clsx';

interface TourButtonProps {
	tourId: number;
	children?: ReactNode;
	className?: string;
}

export default function TourButton({ tourId, children, className }: TourButtonProps) {
	return (
		<button className={clsx('bokunButton', className)} disabled id={`bokun_${tourId}`} data-src={`https://widgets.bokun.io/online-sales/f34383c7-3179-43f7-a169-d3058ddf6840/experience/${tourId}?partialView=1`} data-testid="widget-book-button" style={{ border: 'none', backgroundColor: 'transparent', textAlign:'left' }}>
			{children}
		</button>
	);
}

```

### components/Tour/TourList.tsx

```
import { Locale } from "@/constants/site";
import { getFormattedActivities, filterActivitiesByQuery } from "@/lib/utils";
import { ActivityFilters } from "@/types/activity";

interface TourListProps {
	lang: Locale;
	filters?: ActivityFilters;
}

export default async function TourList({ lang, filters }: TourListProps) {
	const activities = await getFormattedActivities({
		page: 1,
		pageSize: 10
	}, lang);

	const filteredActivities = filterActivitiesByQuery(activities, filters);
	// console.log('activities:', activities);
	console.log('filteredActivities:', filteredActivities);
	return (
		<div>
			{filteredActivities.map((activity) => (
				<div key={activity.id}>
					<h2>{activity.title}</h2>
					{/* <p>{activity.content}</p> */}
				</div>
			))}
		</div>
	)
}

```

### components/Tour/FilterComponent.tsx

```
'use client';

import React, { useState, useCallback } from 'react';
import { Guide, Region } from '@/types';
import { useTranslations } from '@/lib/i18n';
import { Locale } from '@/constants/site';

interface FilterOption {
	id: number;
	name: string;
}

interface FilterComponentProps {
	guides: Guide[];
	regions: Region[];
	tags: FilterOption[];
	onFilterChange: (filters: FilterState) => void;
	lang: Locale; // 言語を指定するためのpropを追加
}

interface FilterState {
	guideId: number | null;
	regionId: number | null;
	tagIds: number[];
}

const FilterButtonGroup: React.FC<{
	label: string;
	options: FilterOption[];
	selectedIds: number[];
	onChange: (ids: number[]) => void;
	multiSelect?: boolean;
}> = React.memo(({ label, options, selectedIds, onChange, multiSelect = false }) => (
	<div className="c-filter-group">
		<div className="c-filter-group__label">{label}</div>
		<div className="c-filter-group__buttons">
			{options.map((option) => (
				<button
					key={option.id}
					className={`c-filter-group__button u-hover ${selectedIds.includes(option.id) ? 'is-active' : ''}`}
					onClick={() => {
						if (multiSelect) {
							onChange(selectedIds.includes(option.id) ? selectedIds.filter((id) => id !== option.id) : [...selectedIds, option.id]);
						} else {
							onChange(selectedIds.includes(option.id) ? [] : [option.id]);
						}
					}}>
					{option.name}
				</button>
			))}
		</div>
	</div>
));

FilterButtonGroup.displayName = 'FilterButtonGroup';

export const FilterComponent: React.FC<FilterComponentProps> = React.memo(
  ({ guides, regions, tags, onFilterChange, lang }) => {
    const t = useTranslations(lang);

    const [filters, setFilters] = useState<FilterState>({
      guideId: null,
      regionId: null,
      tagIds: [],
    });

    const handleFilterChange = useCallback(
      (filterType: keyof FilterState, value: number[]) => {
        const newFilters = {
          ...filters,
          [filterType]: filterType === 'tagIds' ? value : value.length > 0 ? value[0] : null,
        };
        setFilters(newFilters);
        onFilterChange(newFilters);
      },
      [filters, onFilterChange]
    );

    return (
      <div className="c-filter">
        <FilterButtonGroup
          label={t({ ja: 'コーディネーターで絞り込む', en: 'Filter by Navigator' })}
          options={guides}
          selectedIds={filters.guideId ? [filters.guideId] : []}
          onChange={(ids) => handleFilterChange('guideId', ids)}
        />
        <FilterButtonGroup
          label={t({ ja: '地域で絞り込む', en: 'Filter by Region' })}
          options={regions}
          selectedIds={filters.regionId ? [filters.regionId] : []}
          onChange={(ids) => handleFilterChange('regionId', ids)}
        />
        <FilterButtonGroup
          label={t({ ja: 'キーワードで絞り込む', en: 'Filter by Keyword' })}
          options={tags}
          selectedIds={filters.tagIds}
          onChange={(ids) => handleFilterChange('tagIds', ids)}
          multiSelect={true}
        />
      </div>
    );
  }
);

FilterComponent.displayName = 'FilterComponent';

```

### components/Tour/TourItem.tsx

```
import Image from 'next/image';
import { Activity } from '@/types';
import TourButton from '@/components/Tour/TourButton';
import clsx from 'clsx';

export function TourItem({ activity, className }: { activity: Activity; className?: string }) {
	// console.log(activity);
	return (
		<div className={clsx('c-tour', className)} data-activity-id={activity.id}>
			<div className="c-tour__regions">
				{activity.regions &&
					activity.regions.map((region, index) => (
						<div key={index} className="c-tour__region">
							<i className="c-pin"></i>
							<span>{region}</span>
						</div>
					))}
			</div>
			<h2 className="c-tour__title">
				<TourButton tourId={activity.id} className="u-hover">
					{activity.title}
				</TourButton>
			</h2>
			<div className="c-tour__header">
				{activity.photo && (
					<div className="c-tour__image">
						<TourButton tourId={activity.id}>
							<Image src={activity.photo} alt={activity.title} fill sizes="50vw" style={{ objectFit: 'cover' }} />
						</TourButton>
					</div>
				)}
				<div className="c-tour__header-inner">
					<p className="c-tour__price">
						{activity.formattedPrice}
						<span>JPY</span>
					</p>
					<p className="c-tour__duration">{activity.duration}</p>
				</div>
			</div>
			<div className="c-tour__body">
				{activity.excerpt && <div className="c-tour__summary">{activity.excerpt}</div>}
				{activity.guides && (
					<div className="c-tour__guides">
						{activity.guides.map((guide, index) => (
							<div key={index} className="c-tour__guide">
								{guide.photo && (
									<figure className="c-tour__guide-image">
										<Image src={guide.photo.link} alt={guide.name} fill sizes="10vw" style={{ objectFit: 'cover' }} />
									</figure>
								)}
								<div className="c-tour__guide-info">
									<span className="c-tour__guide-name">{guide.name}</span>
									<span className="c-tour__guide-title">{guide.title}</span>
								</div>
							</div>
						))}
					</div>
				)}
				{activity.tags && activity.tags.length > 1 && (
					<div className="c-tour__tags">
						{activity.tags.map((tag, index) => (
							<span key={index} className="c-tour__tag">
								{tag.name}
							</span>
						))}
					</div>
				)}
			</div>
			<div className="c-tour__button">
				<TourButton tourId={activity.id} className="c-tour-button u-hover">
					<span className="c-tour-button__label">RESERVATION & VIEW DETAIL</span>
					<div className="c-tour-button__circle">
						<i className="c-tour-button__icon"></i>
					</div>
				</TourButton>
			</div>
		</div>
	);
}

```

### components/VideoPlayer.tsx

```
'use client';

import React from 'react';
import dynamic from 'next/dynamic';
// import ReactPlayer from 'react-player';
// import { extractVideoID } from '@/lib/utils';

const ReactPlayer = dynamic(() => import('react-player'), { ssr: false });

interface VideoPlayerProps {
  videoUrl: string;
}

export function VideoPlayer({ videoUrl }: VideoPlayerProps) {
  // const videoId = extractVideoID(videoUrl);
  // const youtubeUrl = videoId ? `https://www.youtube.com/watch?v=${videoId}` : '';
	// console.log('youtubeUrl:', youtubeUrl);

  return (
    <div className="c-video">
      <div className="c-video__player">
        <ReactPlayer
          url={videoUrl}
          width="100%"
          height="100%"
          playing={true}
          loop={true}
          muted={true}
          playsinline={true}
          config={{
            youtube: {
              playerVars: {
                controls: 0,
                rel: 0,
                showinfo: 0,
                modestbranding: 1,
                iv_load_policy: 3,
              },
            },
          }}
        />
      </div>
    </div>
  );
}

```

### components/ScrollBarWidthManager.tsx

```
'use client';

import { debounce } from '@/lib/debounce';
import { useEffect } from 'react';

export function ScrollBarWidthManager() {
  useEffect(() => {
    const updateScrollBarWidth = () => {
			// chomedevtoolでのスクロールバーの幅が正しく取れないので、別のアプローチに変更
      // スクロールバー計測用の要素を作成
      const outer = document.createElement('div');
      const inner = document.createElement('div');

      // 外側の要素のスタイル
      outer.style.visibility = 'hidden';
      outer.style.overflow = 'scroll'; // スクロールバーを強制的に表示

      // 要素をDOMに追加
      document.body.appendChild(outer);
      outer.appendChild(inner);

      // スクロールバーの幅を計算
      const scrollBarWidth = outer.offsetWidth - inner.offsetWidth;

      // 計測用の要素を削除
      document.body.removeChild(outer);

      // 計算した幅が妥当な範囲内かチェック（0-50px）
      const validWidth = scrollBarWidth >= 0 && scrollBarWidth <= 50
        ? scrollBarWidth
        : 0;

			// console.log('scrollBarWidth:', scrollBarWidth);

      // CSSカスタムプロパティに設定
      document.documentElement.style.setProperty(
        '--scrollbar-width',
        `${validWidth}px`
      );
    };

    // 初期化時に実行
    updateScrollBarWidth();

    // リサイズ時のイベントハンドラを設定
    const debouncedUpdateScrollBarWidth = debounce(updateScrollBarWidth, 200);
    window.addEventListener('resize', debouncedUpdateScrollBarWidth);

    // クリーンアップ
    return () => {
      window.removeEventListener('resize', debouncedUpdateScrollBarWidth);
    };
  }, []);

  return null;
}

```

### components/Button.tsx

```
import Link from 'next/link';

interface ButtonProps {
  href: string;
  label: string;
  color?: 'default' | 'light';
  className?: string;
  target?: '_blank' | '_self';  // targetプロパティを追加
}

export const Button: React.FC<ButtonProps> = ({
  href,
  label,
  color = 'default',
  className = '',
  target  // targetプロパティを受け取る
}) => {
  const buttonClass = `c-button ${color === 'light' ? 'c-button--light' : ''} ${className}`.trim();

  const linkProps = target === '_blank' ? {
    target: '_blank',
    rel: 'noopener noreferrer'
  } : {};

  return (
    <div className={buttonClass}>
      <span className="c-button__label">
        <Link href={href} className="c-button__link" {...linkProps}>
          {label}
        </Link>
      </span>
      <div className="c-button__circle">
        <i className="c-button__icon"></i>
      </div>
    </div>
  );
};

```

### components/Modal.tsx

```
import React, { useRef, useEffect, useState } from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
  title: string;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, children, title }) => {
  const [isAnimating, setIsAnimating] = useState(false);
  const dialogRef = useRef<HTMLDialogElement>(null);
  const previousFocusRef = useRef<HTMLElement | null>(null);

  useEffect(() => {
    const dialog = dialogRef.current;
    if (!dialog) return;

    const handleBackdropClick = (event: MouseEvent) => {
      if (event.target === dialog) {
        onClose();
      }
    };

    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        event.preventDefault();
        onClose();
      }
    };

    if (isOpen && !dialog.open) {
      previousFocusRef.current = document.activeElement as HTMLElement;
      dialog.showModal();
      setIsAnimating(true);
      document.body.style.overflow = 'hidden';
      dialog.addEventListener('click', handleBackdropClick);
      window.addEventListener('keydown', handleKeyDown);
    } else if (!isOpen && dialog.open) {
      setIsAnimating(true);
      dialog.close();
      document.body.style.overflow = '';
      previousFocusRef.current?.focus();
    }

    return () => {
      dialog.removeEventListener('click', handleBackdropClick);
      window.removeEventListener('keydown', handleKeyDown);
      document.body.style.overflow = '';
    };
  }, [isOpen, onClose]);

  useEffect(() => {
    const dialog = dialogRef.current;
    if (!dialog) return;

    const handleAnimationEnd = () => {
      setIsAnimating(false);
    };

    dialog.addEventListener('animationend', handleAnimationEnd);

    return () => {
      dialog.removeEventListener('animationend', handleAnimationEnd);
    };
  }, []);

  if (!isOpen) {
    return null;
  }

  return (
    <dialog
      ref={dialogRef}
      className={`c-modal ${isOpen ? 'is-open' : ''} ${isAnimating ? 'is-animating' : ''}`}
      aria-labelledby="modal-title"
    >
      <div className="c-modal__content">
        <h2 id="modal-title" className="c-modal__title">{title}</h2>
        {children}
        <button className="c-modal__close" onClick={onClose} aria-label="Close modal">
          <span>close</span><i>×</i>
        </button>
      </div>
    </dialog>
  );
};

export default Modal;

```

### components/VideoPlayerOld.tsx

```
'use client';

import { useEffect, useRef, useState } from 'react';
import YouTubePlayer from '@/lib/youTubePlayer';
import { extractVideoID } from '@/lib/utils';

export function VideoPlayer({ videoUrl }: { videoUrl: string }) {
	const playerRef = useRef<HTMLDivElement>(null);
	const youtubePlayerRef = useRef<YouTubePlayer | null>(null);

	const [isLoading, setIsLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);

	useEffect(() => {
		const videoId = extractVideoID(videoUrl);
		if (!videoId || !playerRef.current) return;

		const playerId = `youtube-player-${videoId}`;
		playerRef.current.id = playerId;

		const player = new YouTubePlayer(videoId, playerId, true);
		youtubePlayerRef.current = player;

		player
			.initialize()
			.then(() => setIsLoading(false))
			.catch((err) => {
				console.error(err);
				setError('Failed to load video');
				setIsLoading(false);
			});

		return () => {
			if (youtubePlayerRef.current) {
				youtubePlayerRef.current.destroy();
			}
		};
	}, [videoUrl]);

	return (
		<div className="c-video">
			{isLoading && <div>Loading...</div>}
			{error && <div>{error}</div>}
			<div className="c-video__player" ref={playerRef}></div>
		</div>
	);
}

```

### components/LanguageSwitcher.tsx

```
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { LOCALES, Locale } from '@/constants/site';

export default function LanguageSwitcher({ currentLang }: { currentLang: Locale }) {
  const pathname = usePathname();

  return (
    <div className="c-lang-switcher">
      {LOCALES.map((locale) => {
        const isActive = currentLang === locale;
        // Remove the current language prefix and add the new one
        const newPathname = pathname.replace(`/${currentLang}`, `/${locale}`);

        if (isActive) {
          return (
            <Link
              key={locale}
							href={newPathname}
              className="c-lang-switcher__item is-active"
              aria-current="true"
            >
              {locale.toUpperCase()}
            </Link>
          );
        }

        return (
          <Link
            key={locale}
            href={newPathname}
            className="c-lang-switcher__item"
            lang={locale}
          >
            {locale.toUpperCase()}
          </Link>
        );
      })}
    </div>
  );
}

```

### package.json

```
{
  "name": "authentic-japan",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@formatjs/intl-localematcher": "^0.5.4",
    "@hookform/resolvers": "^4.1.0",
    "@next/third-parties": "^15.1.6",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@tailwindcss/postcss": "^4.0.6",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.475.0",
    "negotiator": "^0.6.3",
    "next": "14.2.14",
    "postcss": "^8.5.2",
    "react": "^18",
    "react-dom": "^18",
    "react-hook-form": "^7.54.2",
    "react-player": "^2.16.0",
    "sass": "^1.79.4",
    "swiper": "^11.1.14",
    "tailwind-merge": "^3.0.1",
    "tailwindcss": "^4.0.6",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/negotiator": "^0.6.3",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@wordpress/block-library": "^9.9.0",
    "eslint": "^8",
    "eslint-config-next": "14.2.14",
    "typescript": "^5"
  }
}

```

### .clinerules

```


## 技術スタック

- フロントエンド
  - Next.js 14 (App Router)
  - TypeScript
  - TailwindCSS
  - Framer Motion (アニメーション)
- バックエンド
  - WordPress REST API
- テスト
  - Jest
  - React Testing Library
- フォーマッター
  - Prettier
  - ESLint

## ディレクトリ構造

```
src/
├── app/                   # App Router pages
│   ├── layout.tsx        # Root layout
│   ├── page.tsx          # Home page
│   └── [section]/        # Dynamic routes
├── components/           # React components
│   ├── ui/              # Shared UI components
│   └── [feature]/       # Feature specific components
├── lib/                  # Utility functions
│   ├── api/             # API related functions
│   └── utils/           # General utilities
├── hooks/               # Custom React hooks
├── types/               # TypeScript type definitions
└── styles/              # Global styles
```

## コンポーネント設計ルール

### Server Components vs Client Components

1. デフォルトでServer Componentsを使用
   - データフェッチが必要な場合
   - SEOが重要な場合
   - ユーザーインタラクションが不要な場合
   - 可能な限りPPR（Partial Pre-Rendering）を利用

2. Client Componentsの使用ケース ('use client' directive)
   - useState/useEffectが必要な場合
   - ブラウザAPIを使用する場合
   - イベントリスナーが必要な場合
   - クライアントサイドのライブラリを使用する場合

### コンポーネントの命名規則

```typescript
// ページコンポーネント
export default function Page() {
  // ...
}

// 機能コンポーネント
export function FeatureComponent() {
  // ...
}

// UIコンポーネント
export function Button({ children, ...props }: ButtonProps) {
  // ...
}
```


## コミットメッセージ規約

### 基本構造

```
<type>(<scope>): <subject>

<body>

<footer>
```

### Type

- `feat`: 新機能
- `fix`: バグ修正
- `docs`: ドキュメントの変更
- `style`: コードスタイルの変更
- `refactor`: リファクタリング
- `test`: テストの追加・修正
- `chore`: ビルドプロセス・開発環境の変更

### 注意事項

- 1つのコミットでは1つの論理的な変更のみを含める
- 複数の変更がある場合は複数のコミットに分割する
- コミットメッセージは日本語で記述可能

### 例

```
feat(blog): 記事一覧ページの実装

- WordPressからの記事取得機能を実装
- 記事一覧の表示コンポーネントを作成
- ページネーション機能を追加

Refs: #123
```
`
}
```

### lib/debounce.ts

```
/**
 * 指定された遅延時間後に関数を実行するdebounce関数
 * @param callback 実行する関数
 * @param delay 遅延時間（ミリ秒）
 * @returns debounceされた関数
 */
export const debounce = <T extends unknown[], R>(callback: (...args: T) => R, delay: number = 0): ((...args: T) => void) => {
	let timeoutId: ReturnType<typeof setTimeout> | null = null;

	return (...args: T): void => {
			if (timeoutId) {
					clearTimeout(timeoutId);
			}

			timeoutId = setTimeout(() => {
					callback(...args);
			}, delay);
	};
};

```

### lib/i18n.ts

```
import { LOCALES, DEFAULT_LOCALE } from '@/constants/site';
import type { Locale } from '@/constants/site';

// 例：{ja: 'お名前', en: 'Name', fr: 'Nom'}
type Multilingual = {
  [key in Locale]?: string;
};

// export function useTranslations(lang: Locale) {
// 	return function t(multilingual: Multilingual): string {
// 		// multilingual[lang] が存在しない場合は multilingual[DEFAULT_LOCALE] を返す
// 		return multilingual[lang] || multilingual[DEFAULT_LOCALE];
// 	};
// }

export function useTranslations(lang: Locale) {
  return function t(multilingual: Multilingual): string {
    // 指定された言語の翻訳がある場合はそれを返す
    if (multilingual[lang]) {
      return multilingual[lang]!;
    }

    // 指定された言語の翻訳がない場合、デフォルト言語の翻訳を返す
    if (multilingual[DEFAULT_LOCALE]) {
      return multilingual[DEFAULT_LOCALE]!;
    }

    // デフォルト言語の翻訳もない場合、最初に見つかった翻訳を返す
    for (const locale of LOCALES) {
      if (multilingual[locale]) {
        return multilingual[locale]!;
      }
    }

    // どの翻訳も見つからない場合、エラーメッセージを返す
    return 'Translation not found';
  };
}

export function getLangFromUrl(url: URL) {
	const [, lang] = url.pathname.split('/');
	if (LOCALES.includes(lang as (typeof LOCALES)[number])) {
		return lang as (typeof LOCALES)[number];
	}
	return DEFAULT_LOCALE;
}

```

### lib/fetchData.ts

```
import { BokunResponseData, WPSiteContent, WPRegion, WPGuide, WPTour, WPTag, WPCategory, WPNewsArticle, WPMediaItem, } from '@/types';
import { Locale, DEFAULT_LOCALE } from '@/constants/site';

const BOKUN_API_BASE_URL = 'https://bokun-wrapper.pages.dev';
// const BOKUN_API_BASE_URL = 'https://neighborsflavorstours-bokun-wrapper.pages.dev';
const WP_API_BASE_URL = 'https://shimatoworks.xsrv.jp/transformativetour/wp-json/wp/v2';

interface BokunSearchParams {
	facetFilters?: Array<{
		excluded: boolean;
		name: string;
		values: string[];
	}>;
	page: number;
	pageSize: number;
	vendorId?: number;
}

// カスタムエラークラス
class FetchError extends Error {
	constructor(public status: number, message: string) {
		super(message);
		this.name = 'FetchError';
	}
}

// 再利用可能なfetch関数
async function fetchWithErrorHandling<T>(url: string, options?: RequestInit): Promise<T> {
	const response = await fetch(url, options);
	if (!response.ok) {
		throw new FetchError(response.status, `HTTP error! status: ${response.status}`);
	}
	return await response.json();
}

// キャッシュオブジェクト
const cache: Record<string, unknown> = {};

// キャッシュ付きfetch関数
async function cachedFetch<T>(key: string, fetcher: () => Promise<T>): Promise<T> {
	const start = Date.now();
	let source: 'cache' | 'fetch';

	if (process.env.NODE_ENV === 'development') {
		// 開発環境ではキャッシュを使用しない
		const data = await fetcher();
		source = 'fetch';
		const end = Date.now();
		const duration = end - start;
		console.log(`${source}: ${key} (${duration}ms)`);
		return data;
	}

	if (cache[key]) {
		source = 'cache';
		const data = cache[key] as T;
		const end = Date.now();
		const duration = end - start;
		console.log(`${source}: ${key} (${duration}ms)`);
		return data;
	}

	const data = await fetcher();
	cache[key] = data;
	source = 'fetch';
	const end = Date.now();
	const duration = end - start;
	console.log(`${source}: ${key} (${duration}ms)`);
	return data;
}

export async function postSearchActivities(params: BokunSearchParams, lang: Locale = DEFAULT_LOCALE): Promise<BokunResponseData> {
	const url = `${BOKUN_API_BASE_URL}/activity.json/search?lang=${encodeURIComponent(lang)}`;
	return cachedFetch(`activities-${lang}-${JSON.stringify(params)}`, () =>
		fetchWithErrorHandling<BokunResponseData>(url, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(params)
		})
	);
}

export async function getWPSiteOptions(lang: Locale = DEFAULT_LOCALE): Promise<WPSiteContent> {
	const BASE_URL = 'https://shimatoworks.xsrv.jp/transformativetour/wp-json';
	const url = `${BASE_URL}/acf/v1/options?lang=${encodeURIComponent(lang)}&acf_format=standard`;
	// const url = `${WP_API_BASE_URL}/guide?lang=${encodeURIComponent(lang)}&acf_format=standard`;
	return cachedFetch(`options-${lang}`, () => fetchWithErrorHandling<WPSiteContent>(url));
}

export function fetchWPMediaItem(id: number): Promise<WPMediaItem> {
	const url = `${WP_API_BASE_URL}/media/${id}`;
	return cachedFetch(`media-${id}`, () => fetchWithErrorHandling<WPMediaItem>(url));
}

export async function fetchWPTag(id: number): Promise<WPTag> {
	const url = `${WP_API_BASE_URL}/tags/${id}`;
	return cachedFetch(`tag-${id}`, () => fetchWithErrorHandling<WPTag>(url));
}

export async function fetchAllWPTags(lang: Locale = DEFAULT_LOCALE): Promise<WPTag[]> {
	const url = `${WP_API_BASE_URL}/tags?per_page=100&lang=${encodeURIComponent(lang)}`;
	return cachedFetch(`all-tags-${lang}`, () => fetchWithErrorHandling<WPTag[]>(url));
}

export async function fetchAllWPCategories(lang: Locale = DEFAULT_LOCALE): Promise<WPCategory[]> {
	const url = `${WP_API_BASE_URL}/categories?per_page=100&lang=${encodeURIComponent(lang)}`;
	return cachedFetch(`all-categories-${lang}`, () => fetchWithErrorHandling<WPCategory[]>(url));
}

export async function fetchWPGuides(lang: Locale = DEFAULT_LOCALE): Promise<WPGuide[]> {
	const url = `${WP_API_BASE_URL}/guide?lang=${encodeURIComponent(lang)}&acf_format=standard`;
	return cachedFetch(`guides-${lang}`, () => fetchWithErrorHandling<WPGuide[]>(url));
}

export async function fetchWPRegions(lang: Locale = DEFAULT_LOCALE): Promise<WPRegion[]> {
	const url = `${WP_API_BASE_URL}/region?lang=${encodeURIComponent(lang)}&acf_format=standard`;
	return cachedFetch(`regions-${lang}`, () => fetchWithErrorHandling<WPRegion[]>(url));
}

export async function fetchWPTours(lang: Locale = DEFAULT_LOCALE): Promise<WPTour[]> {
	const url = `${WP_API_BASE_URL}/tour?lang=${encodeURIComponent(lang)}&acf_format=standard`;
	return cachedFetch(`tours-${lang}`, () => fetchWithErrorHandling<WPTour[]>(url));
}

export async function fetchNewsArticles(lang: Locale = DEFAULT_LOCALE): Promise<WPNewsArticle[]> {
	const url = `${WP_API_BASE_URL}/posts?lang=${encodeURIComponent(lang)}&acf_format=standard`;
	return cachedFetch(`news-${lang}`, () => fetchWithErrorHandling<WPNewsArticle[]>(url));
}


// export async function fetchPostsWithDetails<T extends WPArticle>(
//   fetchPostsFn: () => Promise<T[]>,
// ): Promise<WPArticleWithDetails[]> {
//   const [posts, categories] = await Promise.all([fetchPostsFn(), fetchWPCategories()]);

//   const postsWithDetails = await Promise.all(
//     posts.map(async (post) => {
//       let mediaItem: WPMediaItem | undefined;
// 			// アイキャッチ画像がある場合はその詳細を取得
//       if (post.featured_media) {
//         try {
//           mediaItem = await fetchWPMediaItem(post.featured_media);
//         } catch (error) {
//           console.error(`Failed to fetch media for post ${post.id}:`, error);
//         }
//       }
// 			// カテゴリーの詳細を取得
//       const categoryDetails = categories.filter(category =>
//         post.categories.includes(category.id)
//       );

//       return {
//         ...post,
//         featured_media_item: mediaItem,
//         category_details: categoryDetails
//       };
//     }),
//   );

//   return postsWithDetails;
// }

// export async function fetchNewsArticlesWithDetails(): Promise<WPArticleWithDetails[]> {
//   return fetchPostsWithDetails(fetchNewsArticles);
// }

export type { BokunSearchParams };

```

### lib/utils.ts

```
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';
import { DEFAULT_LOCALE, Locale } from '@/constants/site';
import { Guide, Activity, Region, News, WPMediaItem, ActivityFilters } from '@/types';
import { BokunSearchParams, fetchAllWPCategories, fetchAllWPTags, fetchNewsArticles, fetchWPGuides, fetchWPMediaItem, fetchWPRegions, fetchWPTours, postSearchActivities } from './fetchData';
import { formatDate } from './formatDate';

// タグ・カテゴリー情報のキャッシュ
let tagCache: Map<number, { name: string; slug: string }> | null = null;
let categoryCache: Map<number, { name: string; slug: string }> | null = null;

async function getTagCache(lang: Locale): Promise<Map<number, { name: string; slug: string }>> {
	if (!tagCache) {
		const tags = await fetchAllWPTags(lang);
		tagCache = new Map(tags.map((tag) => [tag.id, { name: tag.name, slug: tag.slug }]));
	}
	return tagCache;
}

async function getCategoryCache(lang: Locale): Promise<Map<number, { name: string; slug: string }>> {
	if (!categoryCache) {
		const categories = await fetchAllWPCategories(lang);
		// console.log('categoryCache:', categories);
		categoryCache = new Map(categories.map((category) => [category.id, { name: category.name, slug: category.slug }]));
	}
	return categoryCache;
}

export async function getFormattedGuideData(lang: Locale = DEFAULT_LOCALE): Promise<Guide[]> {
	const [guides, regions, tagCacheResult] = await Promise.all([fetchWPGuides(lang), fetchWPRegions(lang), getTagCache(lang)]);

	const regionMap = new Map(regions.map((region) => [region.id, region.acf.name]));

	const formattedGuides = await Promise.all(
		guides.map(async (guide) => {
			// console.log('guide:', guide);
			const tags = guide.tags
				? guide.tags.map((tagId) => {
						const tagInfo = tagCacheResult.get(tagId);
						return tagInfo ? { id: tagId, name: tagInfo.name, slug: tagInfo.slug } : { id: tagId, name: '', slug: '' };
				  })
				: [];
			// const tags = guide.tags ? await Promise.all(guide.tags.map(fetchWPTag)) : [];

			return {
				id: guide.id,
				title: guide.acf.title,
				name: guide.acf.name,
				mv: guide.acf.mv,
				photo: guide.acf.photo,
				copy: guide.acf.copy,
				description: guide.acf.description,
				regionIds: guide.acf.region ?? [], // nullish coalescing operator を使用
				regions: guide.acf.region?.map((id) => regionMap.get(id) || '').filter((name): name is string => name !== '') ?? [],
				tags: tags.map((tag) => ({
					id: tag.id,
					name: tag.name,
					slug: tag.slug
				})),
				values: guide.acf.values ?? [],
				sns: guide.acf.sns
			};
		})
	);

	return formattedGuides;
}

export async function getFormattedRegionData(lang: Locale = DEFAULT_LOCALE): Promise<Region[]> {
	const regions = await fetchWPRegions(lang);

	return regions.map((region) => ({
		id: region.id,
		name: region.acf.name,
		description: region.acf.description,
		mv: region.acf?.mv?.sizes?.large,
		gallery: region.acf.gallery,
		access: region.acf.access
	}));
}

export async function getFormattedActivities(searchParams: BokunSearchParams, lang: Locale = DEFAULT_LOCALE): Promise<Activity[]> {
	try {
		const [bokunActivities, wpTours, formattedGuides, tagCacheResult] = await Promise.all([postSearchActivities(searchParams, lang), fetchWPTours(lang), getFormattedGuideData(lang), getTagCache(lang)]);

		// console.log('bokunActivities:', bokunActivities);

		const activities = await Promise.all(
			bokunActivities.items.map(async (item) => {
				const wpTour = wpTours.find((tour) => tour.acf.bokun_id === item.id);
				const guideIds = wpTour?.acf.guide || [];
				const guides = guideIds.map((id) => formattedGuides.find((guide) => guide.id === Number(id))).filter((guide): guide is Guide => guide !== undefined);

				// guides から regions と regionIds を抽出
				const regions = Array.from(new Set(guides.flatMap((guide) => guide.regions))).filter((region): region is string => region !== undefined);
				const regionIds = Array.from(new Set(guides.flatMap((guide) => guide.regionIds || []))).filter((id): id is number => id !== undefined);

				// キャッシュからタグ情報を取得
				const tags = wpTour?.tags
					? wpTour.tags.map((tagId) => {
							const tagInfo = tagCacheResult.get(tagId);
							return tagInfo ? { id: tagId, name: tagInfo.name, slug: tagInfo.slug } : { id: tagId, name: '', slug: '' };
					  })
					: [];

				const formattedDuration = formatDuration(item.fields.durationWeeks || 0, item.fields.durationDays || 0, item.fields.durationHours || 0);
				const totalDays = (item.fields.durationWeeks || 0) * 7 + (item.fields.durationDays || 0);
				// const fields = item.fields || {};
				// console.log('fields:', fields);

				return {
					id: parseInt(item.id),
					wpId: wpTour?.id,
					title: item.title,
					excerpt: item.excerpt,
					photo: item.keyPhoto?.derived.find((p) => p.name === 'large')?.url || item.keyPhoto?.originalUrl,
					categories: item.activityCategories,
					tags: tags,
					price: item.price,
					formattedPrice: formatNumber(item.price),
					regions: regions,
					regionIds: regionIds,
					duration: formattedDuration,
					durationDays: totalDays,
					durationHours: totalDays > 0 ? 0 : item.fields.durationHours || 0,
					guideIds: guideIds,
					guides: guides
				};
			})
		);
		return activities;
	} catch (error) {
		console.error('Error in getFormattedActivities:', error);
		throw error;
	}
}

export async function getFormattedNewsData(lang: Locale = DEFAULT_LOCALE): Promise<News[]> {
	const [newsArticles, formattedGuides, categoryCacheResult] = await Promise.all([fetchNewsArticles(lang), getFormattedGuideData(lang), getCategoryCache(lang)]);

	const formattedNewsArticles = await Promise.all(
		newsArticles.map(async (article) => {
			// console.log('categories:', article.categories);
			const formatedDate = formatDate(article.date);
			// アイキャッチ画像がある場合はその詳細を取得
			let mediaItem: WPMediaItem | undefined;
			if (article.featured_media) {
				try {
					mediaItem = await fetchWPMediaItem(article.featured_media);
				} catch (error) {
					console.error(`Failed to fetch media for post ${article.id}:`, error);
				}
			}
			const guideIds = article?.acf.guide || [];
			const guides = guideIds.map((id) => formattedGuides.find((guide) => guide.id === Number(id))).filter((guide): guide is Guide => guide !== undefined);
			const categories = article.categories
				? article.categories.map((categoryId) => {
						const categoryInfo = categoryCacheResult.get(categoryId);
						return categoryInfo ? { id: categoryId, name: categoryInfo.name, slug: categoryInfo.slug } : { id: categoryId, name: '', slug: '' };
				  })
				: [];

			return {
				id: article.id,
				date: formatedDate,
				title: article.title.rendered,
				content: article.content.rendered,
				featured_media: mediaItem,
				categories: categories.map((category) => ({
					id: category.id,
					name: category.name,
					slug: category.slug
				})),
				guides: guides
			};
		})
	);

	return formattedNewsArticles;
}

export function getGuidesByRegion(guides: Guide[], regionId: number): Guide[] {
	return guides.filter((guide) => guide.regionIds?.includes(regionId));
}

function formatDuration(weeks: number, days: number, hours: number): string {
	const totalDays = weeks * 7 + days;

	if (totalDays > 0) {
		return `${totalDays} Day${totalDays > 1 ? 's' : ''}`;
	} else if (hours > 0) {
		return `${hours} Hour${hours !== 1 ? 's' : ''}`;
	} else {
		return 'Less than an hour';
	}
}

export function formatNumber(num: number): string {
	return num.toLocaleString('ja-JP');
}

export function filterActivitiesByQuery(activities: Activity[], filters?: ActivityFilters): Activity[] {
  if (!filters) return activities;

  return activities.filter((activity) => {
    // ガイドでフィルタリング
    if (filters.guides?.length) {
      const filterGuideIds = filters.guides.map(Number);
      if (!activity.guideIds?.some(id => filterGuideIds.includes(id))) {
        return false;
      }
    }

    // 地域でフィルタリング
    if (filters.regions?.length) {
      const filterRegionIds = filters.regions.map(Number);
      if (!activity.regionIds?.some(id => filterRegionIds.includes(id))) {
        return false;
      }
    }

    // テキスト検索（変更なし）
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      const titleMatch = activity.title.toLowerCase().includes(searchLower);
      const excerptMatch = activity.excerpt?.toLowerCase().includes(searchLower) ?? false;
      if (!titleMatch && !excerptMatch) {
        return false;
      }
    }

    return true;
  });
}

export function filterActivities(activities: Activity[], filters: { guideId: number | null; regionId: number | null; tagIds: number[] }, guides: Guide[], regions: Region[]): Activity[] {
	return activities.filter((activity) => {
		if (filters.guideId != null && !activity.guides?.some((guide) => guide.id === filters.guideId)) return false;
		if (filters.regionId != null) {
			const regionName = regions.find((r) => r.id === filters.regionId)?.name;
			if (regionName && !activity.regions?.includes(regionName)) return false;
		}
		if (filters.tagIds.length > 0 && !filters.tagIds.every((tagId) => activity.tags?.some((tag) => tag.id === tagId))) return false;
		return true;
	});
}

export function extractVideoID(url: string): string | null {
	const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
	const match = url.match(regExp);
	return match && match[2].length === 11 ? match[2] : null;
}

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

```

### lib/validations/contact.ts

```
import { z } from 'zod';
import { getEmailSchema, getNameSchema } from './shared';
import { Locale } from '@/constants/site';

export const getContactFormSchema = (lang: Locale) =>
	z.object({
		name: getNameSchema(lang),
		email: getEmailSchema(lang),
		body: z
			.string()
			.min(10, lang === 'ja' ? '本文は10文字以上で入力してください' : lang === 'en' ? 'Please enter at least 10 characters' : 'Veuillez entrer au moins 10 caractères')
			.max(1000, lang === 'ja' ? '本文は1000文字以内で入力してください' : lang === 'en' ? 'Please enter no more than 1000 characters' : 'Veuillez entrer moins de 1000 caractères'),
		privacyPolicy: z.boolean().refine((val) => val === true, {
			message: lang === 'ja' ? '利用規約に同意する必要があります' : lang === 'en' ? 'You must agree to the Terms of Service' : "Vous devez accepter les conditions d'utilisation"
		})
	});

export const contactFormSchema = getContactFormSchema('ja');

export type ContactFormData = z.infer<typeof contactFormSchema>;

```

### lib/validations/shared.ts

```
import { z } from 'zod';
import { Locale } from '@/constants/site';

// 共通で使用するバリデーションルール
export const getEmailSchema = (lang: Locale) =>
  z.string().email(
    lang === 'ja'
      ? '有効なメールアドレスを入力してください'
      : lang === 'en'
      ? 'Please enter a valid email address'
      : 'Veuillez entrer une adresse e-mail valide'
  );

export const getNameSchema = (lang: Locale) =>
  z.string().min(
    2,
    lang === 'ja'
      ? '名前は2文字以上で入力してください'
      : lang === 'en'
      ? 'Please enter at least 2 characters for the name'
      : 'Veuillez entrer au moins 2 caractères pour le nom'
  );

// デフォルトの日本語スキーマ（後方互換性のため）
export const emailSchema = getEmailSchema('ja');
export const nameSchema = getNameSchema('ja');

```

### lib/formatDate.ts

```
export function formatDate(isoDate: string): string {
  const date = new Date(isoDate);

  // 無効な日付のチェック
  if (isNaN(date.getTime())) {
    throw new Error("Invalid date string provided");
  }

  const year = date.getFullYear();
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const day = date.getDate().toString().padStart(2, "0");

  return `${year}.${month}.${day}`;
}

```

### lib/youTubePlayer.js

```
// YouTubePlayer.js

class YouTubePlayer {
	constructor(videoId, playerId, autoplay = false) {
		this.videoId = videoId;
		this.playerId = playerId;
		this.player = null;
		this.played = false;
		this.autoplay = autoplay;
		this.isReady = false;
		this.interval = null;
	}

	async initialize() {
		if (typeof window === 'undefined') return; // サーバーサイドレンダリング対策

		if (!window.YT) {
			await this.loadYouTubeAPI();
		}

		await this.createPlayer();
	}

	loadYouTubeAPI() {
		return new Promise((resolve) => {
			const tag = document.createElement('script');
			tag.src = 'https://www.youtube.com/iframe_api';
			const firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
			window.onYouTubeIframeAPIReady = resolve;
		});
	}

	createPlayer() {
		return new Promise((resolve) => {
			this.player = new YT.Player(this.playerId, {
				videoId: this.videoId,
				playerVars: {
					autoplay: this.autoplay ? 1 : 0,
					controls: 0,
					rel: 0,
					showinfo: 0,
					mute: 1,
					modestbranding: 1,
					iv_load_policy: 3,
					playsinline: 1
				},
				events: {
					onReady: () => {
						this.isReady = true;
						this.onPlayerReady();
						resolve();
					},
					onStateChange: (event) => this.onPlayerStateChange(event)
				}
			});
		});
	}

	onPlayerReady() {
		if (this.player && this.isReady) {
			this.player.setPlaybackQuality('highres');
			if (this.autoplay) {
				this.player.playVideo();
			}
		}
	}

	onPlayerStateChange() {
		if (!this.player || !this.isReady) return;

		try {
			const ytStatus = this.player.getPlayerState();
			const playerElement = document.getElementById(this.playerId);

			switch (ytStatus) {
				case YT.PlayerState.PLAYING:
					playerElement?.parentNode?.classList.add('is-loaded');
					if (!this.played) {
						this.played = true;
						const duration = this.player.getDuration() || 0;
						this.interval = window.setInterval(() => {
							this.player.seekTo(0);
							this.player.playVideo();
						}, duration * 1000);
					}
					break;
				// 他のケースも同様に処理
			}
		} catch (error) {
			console.error('YouTube player error:', error);
		}
	}

	play() {
		if (this.player && this.isReady) {
			this.player.playVideo();
		}
	}

	destroy() {
		if (this.player) {
			this.player.destroy();
			this.player = null;
		}
		if (this.interval) {
			clearInterval(this.interval);
			this.interval = null;
		}
		this.isReady = false;
		this.played = false;
	}
}

export default YouTubePlayer;

```

### components.json

```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/[lang]/global.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

### tsconfig.json

```
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

```

### .eslintrc.json

```
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

```

